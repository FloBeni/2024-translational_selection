scale_y_continuous(limits = c(0, 20)),
scale_y_continuous(limits = c(0, 30)),
scale_y_continuous(limits = c(0, 45)),
scale_y_continuous(limits = c(0, 30)),
scale_y_continuous(limits = c(0, 45)),
scale_y_continuous(limits = c(0, 30)),
scale_y_continuous(limits = c(0, 40)),
scale_y_continuous(limits = c(0, 35)),
scale_y_continuous(limits = c(0, 25)),
scale_y_continuous(limits = c(0, 60)),
scale_y_continuous(limits = c(0, 30)),
scale_y_continuous(limits = c(0, 30)),
scale_y_continuous(limits = c(0, 40)),
scale_y_continuous(limits = c(0, 40)),
scale_y_continuous(limits = c(0, 20)),
scale_y_continuous(limits = c(0, 30)),
scale_y_continuous(limits = c(0, 20)),
scale_y_continuous(limits = c(0, 20)),
scale_y_continuous(limits = c(0, 25))
)
)
pB
jpeg(paste(path_pannel,"p3B.jpg",sep=""), width = 2000/1,  1800/1,res=110/1)
print(pB)
dev.off()
# Figure 3
imgA = load.image(paste(path_require,"wobble_pairing.png",sep="") )
imgB = load.image(paste(path_pannel,"p3B.jpg",sep="") )
{
pdf(file= paste(path_figure,"Figure3.pdf",sep=""), width=7, height=7)
m=matrix(rep(NA,10*100), nrow=100)
for(i in 1:10){
m[,i]=c(rep(1,15),rep(2,85))
}
layout(m)
m
par(mar=c(0, 0, 0, 0))
plot(imgA, axes=FALSE)
mtext("A",at=60,adj=-4, side=2, line=1, font=2, cex=1.7,las=2)
par(mar=c(0, 0, 0.2, 0))
plot(imgB, axes=FALSE)
par(mar=c(0, 1, 1, 0))
mtext("B",at=30,adj=-1, side=2, line=1, font=2, cex=1.7,las=2)
dev.off()
}
{
pdf(file= paste(path_figure,"Figure3.pdf",sep=""), width=7, height=7)
m=matrix(rep(NA,10*100), nrow=100)
for(i in 1:10){
m[,i]=c(rep(1,15),rep(2,85))
}
layout(m)
m
par(mar=c(0, 0, 0, 0))
plot(imgA, axes=FALSE)
mtext("A",at=60,adj=-4, side=2, line=1, font=2, cex=1.7,las=2)
par(mar=c(0, 0, 0.2, 0))
plot(imgB, axes=FALSE)
par(mar=c(0, 1, 1, 0))
mtext("B",at=30,adj=-.5, side=2, line=1, font=2, cex=1.7,las=2)
dev.off()
}
# Generate Supplementary Figure 6
source("figure/figure_supp_generator/library_path.R")
resolution = 4
# Pannel A
data5 = read.delim("data/data5_supp.tab")
data5$gene_set = str_replace_all(data5$gene_set,"all,","genes,")
data5[data5$categorie == "POC-matching triplets (POCMT)",]$categorie = "control"
data5[data5$categorie == "Putative optimal codons (POC)",]$categorie = ""
# dt_graph = data5[ data5$species "Musca_domestica" & data5$set != "POCs",]
dt_graph = data5[  data5$set != "POCs",]
dt_graph$species = paste(str_replace_all(dt_graph$species,"_"," "),sep="")
pA = ggplot(dt_graph ,
aes(x=fpkm ,y=freq*100,fill=paste(set,categorie),col=paste(set,categorie)))  + geom_point(alpha=0)+
geom_line(data=dt_graph,size=2,aes(linetype=paste(set,categorie))) +
# geom_point(data=dt_graph,pch=21,col="black",size=2)+
scale_fill_manual(values=set_color[c(2,1,4,3)]) +
scale_color_manual(values=set_color[c(2,1,4,3)]) +
scale_shape_manual(values=c(21,22,24,23,25,20))+
scale_linetype_manual(values=c("solid","solid","solid","solid"))+
xlab("Gene expression level (FPKM, log scale)") + ylab("Codon frequency (%)") + theme_bw() + theme(
axis.title.x = element_text(color="black",vjust=0, size=25,family="ubuntu condensed"),
axis.title.y = element_text(color="black",vjust=1.5, size=25, family="ubuntu condensed"),
axis.text.y =  element_text(color="black", size=23, family="ubuntu condensed"),
axis.text.x =  element_text(color="black", size=20, family="ubuntu condensed"),
title =  element_text(color="black", size=25, family="ubuntu condensed"),
legend.text =  element_text(color="black", size=25, family="ubuntu condensed",margin = margin(t = 5)),
strip.text = element_text(size=15,face="italic")
)+labs(fill='Categories',color='Categories',shape='',linetype='')+
guides(fill = guide_legend(override.aes = list(pch=NA),order = 1),
color = guide_legend(order = 1),
linetype = guide_legend(order = 2),
shape = guide_legend(order = 2),
) + scale_x_log10(
breaks=c(0.01,0.1,1,10,100,1000,10000,50000),
labels=c(0.01,0.1,1,10,100,1000,10000,50000),limits=c(0.005,1000))+ ylim(0.2*100,0.8*100) +
annotation_logticks(sides = "b")+
guides(fill="none",linetype="none",shape="none") +
facet_wrap(~species)
pA
# Generate Data 2, 3, 5 and 6
code = read.delim(paste("data/standard_genetic_code.tab",sep=""))
rownames(code) = code$codon
stop_codon = rownames(code[code$aa_name == "Ter",])
data_conservation = read.delim(paste("data/compilation_prop_gap_pergene_25_50_75.tab.gz",sep=""))
data_conservation_rmfirst1000bp = read.delim(paste("data/compilation_prop_gap_pergene_25_50_75_rmfirst1000bp.tab.gz",sep=""))
GTDrift_list_species = read.delim("data/GTDrift_list_species.tab")
rownames(GTDrift_list_species) = GTDrift_list_species$species
species_list = c( "Caenorhabditis_elegans" , "Drosophila_melanogaster" , "Homo_sapiens" , "Musca_domestica" ,"Anopheles_gambiae","Pieris_rapae" )
data2 = data.frame()
data3 = data.frame()
data5 = data.frame()
data6 = data.frame()
# Generate Figure 6
source("figure/figure_main_generator/library_path.R")
resolution = 1
# Pannel A
data1 = read.delim("data/data1_supp.tab")
data1$clade_group = GTDrift_list_species[data1$species,]$clade_group
data1 = data1[ data1$nb_codon_not_decoded == 0  & data1$pval_aa_fpkm < 0.05 & data1$nb_genes_filtered >= 5000 ,]
View(data1)
# Generate Data 2, 3, 5 and 6
code = read.delim(paste("data/standard_genetic_code.tab",sep=""))
rownames(code) = code$codon
stop_codon = rownames(code[code$aa_name == "Ter",])
data_conservation = read.delim(paste("data/compilation_prop_gap_pergene_25_50_75.tab.gz",sep=""))
data_conservation_rmfirst1000bp = read.delim(paste("data/compilation_prop_gap_pergene_25_50_75_rmfirst1000bp.tab.gz",sep=""))
GTDrift_list_species = read.delim("data/GTDrift_list_species.tab")
rownames(GTDrift_list_species) = GTDrift_list_species$species
species_list = c( "Caenorhabditis_elegans" , "Drosophila_melanogaster" , "Homo_sapiens" , "Musca_domestica" ,"Anopheles_gambiae","Pieris_rapae",
"Bactrocera_oleae","Ceratitis_capitata","Bombus_terrestris","Ignelater_luminosus" )
data2 = data.frame()
data3 = data.frame()
data5 = data.frame()
data6 = data.frame()
for (species in species_list){
print(species)
genome_assembly = GTDrift_list_species[species,]$assembly_accession
taxID = GTDrift_list_species[species,]$NCBI.taxid
path = paste("data/per_species/",species,"_NCBI.taxid",taxID,"/",genome_assembly,sep="")
codon_usage = read.delim( paste(path,"/codon_usage_gene_fpkm.tab.gz",sep="") )
codon_usage$intern_stop_codon = rowSums(codon_usage[,stop_codon]) - grepl(paste(stop_codon,collapse = "|"),codon_usage$end_codon)
codon_usage = codon_usage[codon_usage$intern_stop_codon == 0 & codon_usage$start_codon == "ATG" & codon_usage$length_cds %% 3 == 0,]
if (quantile(grepl(paste(stop_codon,collapse = "|"),codon_usage$end_codon),0.75) != 0){  # if annotated seq have a stop codon for the majority then remove those that dont
codon_usage = codon_usage[grepl(paste(stop_codon,collapse = "|"),codon_usage$end_codon),] } else { print(species)}
codon_usage = codon_usage[order(codon_usage$length_cds,decreasing = T),]
codon_usage = codon_usage[!duplicated(codon_usage$gene_id),]
codon_usage = codon_usage[!is.na(codon_usage$median_fpkm) ,]
codon_usage = codon_usage[codon_usage$median_fpkm != 0 ,]
## GCi vs GC3
GC3_obs = rowSums(codon_usage[c("C3","G3")],na.rm = T)
ATGC3_neg_obs = rowSums(codon_usage[c("A3","T3","C3","G3")],na.rm = T)
GCi_obs = rowSums(codon_usage[c("Ci","Gi")],na.rm = T)
ATGCi_neg_obs = rowSums(codon_usage[c("Ai","Ti","Ci","Gi")],na.rm = T)
GC3 = GC3_obs / ATGC3_neg_obs
GCi = GCi_obs / ATGCi_neg_obs
data2 = rbind(data2,data.frame(
species,
GCi,
GC3,
gene_expression = codon_usage$median_fpkm
))
##### AA frequency
observation = colSums( codon_usage[3:70] * codon_usage$median_fpkm , na.rm = T )
tRNA_optimal = read.delim(paste(path,"/decoding_table.tab.gz",sep=""))
rownames(tRNA_optimal) = tRNA_optimal$codon
tRNA_optimal = tRNA_optimal[tRNA_optimal$aa_name != "Ter",]
nb_codon_not_decoded = sum(!tRNA_optimal$decoded)
aa_data = data.frame()
for (amino_acid in unique(code$aa_name)){
codon_used = rownames(code[code$aa_name == amino_acid,])
aa_data = rbind(aa_data,
data.frame(
species,
amino_acid ,
letter_aa = unique(code[code$aa_name == amino_acid,]$aa) ,
tRNASE_copies= sum(tRNA_optimal[codon_used,]$nb_tRNA_copies,na.rm = T),
obs_codon = sum(observation[codon_used])
))
}
aa_data = aa_data[!grepl("Ter",aa_data$amino_acid) ,]
data3 = rbind(data3,aa_data)
##### Over-used of pOC in expressed genes
xaxis = codon_usage$median_fpkm
proportion = 2/100
quantile = unique( quantile(xaxis, probs = seq(0, 1,proportion),na.rm=T ))
intervalle_FPKM = cut(xaxis, quantile,include.lowest = T,include.higher=T)
FPKM_bins = tapply(xaxis, intervalle_FPKM, median)
for ( type_aa in c( "POC1","POC2","POCs")){
if (type_aa == "POC1" ){
subset_selected = tRNA_optimal[tRNA_optimal$POC1,]
list_POC = subset_selected$codon
list_aa = subset_selected$aa_name
list_codon = tRNA_optimal[tRNA_optimal$aa_name %in% list_aa,]$codon
} else if  (type_aa == "POC2" ){
subset_selected = tRNA_optimal[tRNA_optimal$POC2,]
list_POC = subset_selected$codon
list_aa = subset_selected$aa_name
list_codon = tRNA_optimal[tRNA_optimal$aa_name %in% list_aa,]$codon
} else if  (type_aa == "POCs" ){
subset_selected = tRNA_optimal[tRNA_optimal$POC2 | tRNA_optimal$POC1,]
list_POC = subset_selected$codon
list_aa = subset_selected$aa_name
list_codon = tRNA_optimal[tRNA_optimal$aa_name %in% list_aa,]$codon
}
print(list_POC)
print(list_codon)
POC_obs = rowSums(codon_usage[ list_POC ],na.rm = T)
POC_codon = rowSums(codon_usage[ list_codon ],na.rm = T)
POC_obs_intronic = rowSums(codon_usage[paste(list_POC,'_intronic',sep = "")],na.rm = T)
POC_codon_intronic = rowSums(codon_usage[paste(list_codon,'_intronic',sep = "")],na.rm = T)
data5 = rbind(data5,data.frame(
species,
set = type_aa,
nb_genes = as.numeric(table(intervalle_FPKM)),
freq =  tapply( POC_obs / POC_codon  , intervalle_FPKM , function(x) mean(x,na.rm=T)),
fpkm = FPKM_bins,
categorie = "Putative optimal codons (POC)",
type_aa=paste(type_aa," codons, Nb aa = ",length(list_aa),sep=""),
gene_set = paste("N = " , format(sum(!is.na(POC_obs / POC_codon) ),big.mark=",",scientific=T),sep=""),
nb_poc =  length(list_POC) ,
nb_aa = length(list_aa),
list=paste(list_POC,collapse =";")
))
data5 = rbind(data5,data.frame(
species,
set = type_aa,
nb_genes = as.numeric(table(intervalle_FPKM)),
freq =   tapply( POC_obs_intronic / POC_codon_intronic  , intervalle_FPKM , function(x) mean(x,na.rm=T)),
fpkm = FPKM_bins,
categorie = "POC-matching triplets (POCMT)",
type_aa=paste(type_aa," codons, Nb aa = ",length(list_aa),sep=""),
gene_set=paste("N = " , format(sum(!is.na(POC_obs_intronic / POC_codon_intronic) ),big.mark=",",scientific=T),sep=""),
nb_poc =  length(list_POC),
nb_aa = length(list_aa),
list=paste(list_POC,collapse=";")
))
## Over-used of POC in constraint sites
if (GTDrift_list_species[species,]$clade_group %in% c("Mammalia","Aves","Other Tetrapods")){
data_conservation_sub = data_conservation_rmfirst1000bp[data_conservation_rmfirst1000bp$species == species & data_conservation_rmfirst1000bp$protein %in% codon_usage$protein_id,]
} else {
data_conservation_sub = data_conservation[data_conservation$species == species & data_conservation$protein %in% codon_usage$protein_id,]
}
table_constrain = data.frame(busco_id = data_conservation_sub$busco_id)
for (constrain in c("_highconst","_modconst","_sligconst","_unconst")){
table_constrain[,paste("POC",constrain,sep="")] = rowSums(data_conservation_sub[paste(list_POC,constrain,sep = "")],na.rm = T)
table_constrain[,paste("POC_codon",constrain,sep="")] = rowSums(data_conservation_sub[paste(list_codon,constrain,sep = "")],na.rm = T)
}
data6 = rbind(data6, data.frame(
species,
type_aa,
busco_id=table_constrain$busco_id,
freq = table_constrain$POC_highconst / table_constrain$POC_codon_highconst ,
nb_site = sum(data_conservation_sub$len_high_const_seq),
nb_genes = nrow(data_conservation_sub),
categorie = "Highly constrained"
))
data6 = rbind(data6, data.frame(
species,
type_aa,
busco_id=table_constrain$busco_id,
freq = table_constrain$POC_modconst / table_constrain$POC_codon_modconst ,
nb_site = sum(data_conservation_sub$len_mod_const_seq),
nb_genes = nrow(data_conservation_sub),
categorie = "Moderately constrained"
))
data6 = rbind(data6, data.frame(
species,
type_aa,
busco_id=table_constrain$busco_id,
freq = table_constrain$POC_sligconst / table_constrain$POC_codon_sligconst ,
nb_site = sum(data_conservation_sub$len_slight_const_seq),
nb_genes = nrow(data_conservation_sub),
categorie = "Slighlty constrained"
))
data6 = rbind(data6, data.frame(
species,
type_aa,
busco_id=table_constrain$busco_id,
freq = table_constrain$POC_unconst / table_constrain$POC_codon_unconst ,
nb_site = sum(data_conservation_sub$len_unconst_seq),
nb_genes = nrow(data_conservation_sub),
categorie = "Unconstrained"
))
}
}
write.table(data2 , "data/data2_supp.tab",quote=F,row.names = F,sep="\t")
write.table(data3 , "data/data3_supp.tab",quote=F,row.names = F,sep="\t")
write.table(data5 , "data/data5_supp.tab",quote=F,row.names = F,sep="\t")
write.table(data6 , "data/data6_supp.tab",quote=F,row.names = F,sep="\t")
# Generate Supplementary Figure 6
source("figure/figure_supp_generator/library_path.R")
resolution = 4
# Pannel A
data5 = read.delim("data/data5_supp.tab")
data5$gene_set = str_replace_all(data5$gene_set,"all,","genes,")
data5[data5$categorie == "POC-matching triplets (POCMT)",]$categorie = "control"
data5[data5$categorie == "Putative optimal codons (POC)",]$categorie = ""
# dt_graph = data5[ data5$species "Musca_domestica" & data5$set != "POCs",]
dt_graph = data5[  data5$set != "POCs" & data5$species %in%  c( "Caenorhabditis_elegans" , "Drosophila_melanogaster" , "Homo_sapiens" , "Musca_domestica" ,"Anopheles_gambiae","Pieris_rapae"),]
dt_graph$species = paste(str_replace_all(dt_graph$species,"_"," "),sep="")
pA = ggplot(dt_graph ,
aes(x=fpkm ,y=freq*100,fill=paste(set,categorie),col=paste(set,categorie)))  + geom_point(alpha=0)+
geom_line(data=dt_graph,size=2,aes(linetype=paste(set,categorie))) +
# geom_point(data=dt_graph,pch=21,col="black",size=2)+
scale_fill_manual(values=set_color[c(2,1,4,3)]) +
scale_color_manual(values=set_color[c(2,1,4,3)]) +
scale_shape_manual(values=c(21,22,24,23,25,20))+
scale_linetype_manual(values=c("solid","solid","solid","solid"))+
xlab("Gene expression level (FPKM, log scale)") + ylab("Codon frequency (%)") + theme_bw() + theme(
axis.title.x = element_text(color="black",vjust=0, size=25,family="ubuntu condensed"),
axis.title.y = element_text(color="black",vjust=1.5, size=25, family="ubuntu condensed"),
axis.text.y =  element_text(color="black", size=23, family="ubuntu condensed"),
axis.text.x =  element_text(color="black", size=20, family="ubuntu condensed"),
title =  element_text(color="black", size=25, family="ubuntu condensed"),
legend.text =  element_text(color="black", size=25, family="ubuntu condensed",margin = margin(t = 5)),
strip.text = element_text(size=15,face="italic")
)+labs(fill='Categories',color='Categories',shape='',linetype='')+
guides(fill = guide_legend(override.aes = list(pch=NA),order = 1),
color = guide_legend(order = 1),
linetype = guide_legend(order = 2),
shape = guide_legend(order = 2),
) + scale_x_log10(
breaks=c(0.01,0.1,1,10,100,1000,10000,50000),
labels=c(0.01,0.1,1,10,100,1000,10000,50000),limits=c(0.005,1000))+ ylim(0.2*100,0.8*100) +
annotation_logticks(sides = "b")+
guides(fill="none",linetype="none",shape="none") +
facet_wrap(~species)
pA
# Generate Supplementary Figure 6
source("figure/figure_supp_generator/library_path.R")
resolution = 4
# Pannel A
data5 = read.delim("data/data5_supp.tab")
data5$gene_set = str_replace_all(data5$gene_set,"all,","genes,")
data5[data5$categorie == "POC-matching triplets (POCMT)",]$categorie = "control"
data5[data5$categorie == "Putative optimal codons (POC)",]$categorie = ""
# dt_graph = data5[ data5$species "Musca_domestica" & data5$set != "POCs",]
dt_graph = data5[  data5$set != "POCs" ,]
dt_graph$species = paste(str_replace_all(dt_graph$species,"_"," "),sep="")
pA = ggplot(dt_graph ,
aes(x=fpkm ,y=freq*100,fill=paste(set,categorie),col=paste(set,categorie)))  + geom_point(alpha=0)+
geom_line(data=dt_graph,size=2,aes(linetype=paste(set,categorie))) +
# geom_point(data=dt_graph,pch=21,col="black",size=2)+
scale_fill_manual(values=set_color[c(2,1,4,3)]) +
scale_color_manual(values=set_color[c(2,1,4,3)]) +
scale_shape_manual(values=c(21,22,24,23,25,20))+
scale_linetype_manual(values=c("solid","solid","solid","solid"))+
xlab("Gene expression level (FPKM, log scale)") + ylab("Codon frequency (%)") + theme_bw() + theme(
axis.title.x = element_text(color="black",vjust=0, size=25,family="ubuntu condensed"),
axis.title.y = element_text(color="black",vjust=1.5, size=25, family="ubuntu condensed"),
axis.text.y =  element_text(color="black", size=23, family="ubuntu condensed"),
axis.text.x =  element_text(color="black", size=20, family="ubuntu condensed"),
title =  element_text(color="black", size=25, family="ubuntu condensed"),
legend.text =  element_text(color="black", size=25, family="ubuntu condensed",margin = margin(t = 5)),
strip.text = element_text(size=15,face="italic")
)+labs(fill='Categories',color='Categories',shape='',linetype='')+
guides(fill = guide_legend(override.aes = list(pch=NA),order = 1),
color = guide_legend(order = 1),
linetype = guide_legend(order = 2),
shape = guide_legend(order = 2),
) + scale_x_log10(
breaks=c(0.01,0.1,1,10,100,1000,10000,50000),
labels=c(0.01,0.1,1,10,100,1000,10000,50000),limits=c(0.005,1000))+ ylim(0.2*100,0.8*100) +
annotation_logticks(sides = "b")+
guides(fill="none",linetype="none",shape="none") +
facet_wrap(~species)
pA
# Generate Supplementary Figure 6
source("figure/figure_supp_generator/library_path.R")
resolution = 4
# Pannel A
data5 = read.delim("data/data5_supp.tab")
data5$gene_set = str_replace_all(data5$gene_set,"all,","genes,")
data5[data5$categorie == "POC-matching triplets (POCMT)",]$categorie = "control"
data5[data5$categorie == "Putative optimal codons (POC)",]$categorie = ""
# dt_graph = data5[ data5$species "Musca_domestica" & data5$set != "POCs",]
dt_graph = data5[  data5$set != "POCs" & data5$species %in%  c( "Bactrocera_oleae","Ceratitis_capitata","Bombus_terrestris","Ignelater_luminosus"),]
dt_graph$species = paste(str_replace_all(dt_graph$species,"_"," "),sep="")
pA = ggplot(dt_graph ,
aes(x=fpkm ,y=freq*100,fill=paste(set,categorie),col=paste(set,categorie)))  + geom_point(alpha=0)+
geom_line(data=dt_graph,size=2,aes(linetype=paste(set,categorie))) +
# geom_point(data=dt_graph,pch=21,col="black",size=2)+
scale_fill_manual(values=set_color[c(2,1,4,3)]) +
scale_color_manual(values=set_color[c(2,1,4,3)]) +
scale_shape_manual(values=c(21,22,24,23,25,20))+
scale_linetype_manual(values=c("solid","solid","solid","solid"))+
xlab("Gene expression level (FPKM, log scale)") + ylab("Codon frequency (%)") + theme_bw() + theme(
axis.title.x = element_text(color="black",vjust=0, size=25,family="ubuntu condensed"),
axis.title.y = element_text(color="black",vjust=1.5, size=25, family="ubuntu condensed"),
axis.text.y =  element_text(color="black", size=23, family="ubuntu condensed"),
axis.text.x =  element_text(color="black", size=20, family="ubuntu condensed"),
title =  element_text(color="black", size=25, family="ubuntu condensed"),
legend.text =  element_text(color="black", size=25, family="ubuntu condensed",margin = margin(t = 5)),
strip.text = element_text(size=15,face="italic")
)+labs(fill='Categories',color='Categories',shape='',linetype='')+
guides(fill = guide_legend(override.aes = list(pch=NA),order = 1),
color = guide_legend(order = 1),
linetype = guide_legend(order = 2),
shape = guide_legend(order = 2),
) + scale_x_log10(
breaks=c(0.01,0.1,1,10,100,1000,10000,50000),
labels=c(0.01,0.1,1,10,100,1000,10000,50000),limits=c(0.005,1000))+ ylim(0.2*100,0.8*100) +
annotation_logticks(sides = "b")+
guides(fill="none",linetype="none",shape="none") +
facet_wrap(~species)
pA
# Generate Supplementary Figure 10
source("figure/figure_supp_generator/library_path.R")
resolution = 4
# Pannel A
data5 = read.delim("data/data5_supp.tab")
data5$gene_set = str_replace_all(data5$gene_set,"all,","genes,")
data5[data5$categorie == "POC-matching triplets (POCMT)",]$categorie = "control"
data5[data5$categorie == "Putative optimal codons (POC)",]$categorie = ""
# dt_graph = data5[ data5$species "Musca_domestica" & data5$set != "POCs",]
dt_graph = data5[  data5$set != "POCs" & data5$species %in%  c( "Bactrocera_oleae","Ceratitis_capitata","Bombus_terrestris","Ignelater_luminosus"),]
dt_graph$species = paste(str_replace_all(dt_graph$species,"_"," "),sep="")
pA = ggplot(dt_graph ,
aes(x=fpkm ,y=freq*100,fill=paste(set,categorie),col=paste(set,categorie)))  + geom_point(alpha=0)+
geom_line(data=dt_graph,size=2,aes(linetype=paste(set,categorie))) +
# geom_point(data=dt_graph,pch=21,col="black",size=2)+
scale_fill_manual(values=set_color[c(2,1,4,3)]) +
scale_color_manual(values=set_color[c(2,1,4,3)]) +
scale_shape_manual(values=c(21,22,24,23,25,20))+
scale_linetype_manual(values=c("solid","solid","solid","solid"))+
xlab("Gene expression level (FPKM, log scale)") + ylab("Codon frequency (%)") + theme_bw() + theme(
axis.title.x = element_text(color="black", size=30,family="ubuntu condensed",vjust=0),
axis.title.y = element_text(color="black", size=30, family="ubuntu condensed",vjust=1.7),
axis.text.y =  element_text(color="black", size=25, family="ubuntu condensed"),
axis.text.x =  element_text(color="black", size=25, family="ubuntu condensed"),
title =  element_text(color="black", size=25, family="ubuntu condensed"),
legend.text =  element_text(color="black", size=25, family="ubuntu condensed",margin = margin(t = 5)),
strip.text = element_text(size=15,face="italic")
)+labs(fill='Categories',color='Categories',shape='',linetype='')+
guides(fill = guide_legend(override.aes = list(pch=NA),order = 1),
color = guide_legend(order = 1),
linetype = guide_legend(order = 2),
shape = guide_legend(order = 2),
) + scale_x_log10(
breaks=c(0.01,0.1,1,10,100,1000,10000,50000),
labels=c(0.01,0.1,1,10,100,1000,10000,50000),limits=c(0.005,1000))+ ylim(0.2*100,0.8*100) +
annotation_logticks(sides = "b")+
guides(fill="none",linetype="none",shape="none") +
facet_wrap(~species)
pA
jpeg(paste(path_pannel,"p10A_supp.jpg",sep=""),  width = 10500/2*0.8/2,  5400/2/2,res=600/1.8/2)
print(pA)
dev.off()
# Supplementary Figure 10
imgA = load.image(paste(path_pannel,"p10A_supp.jpg",sep="") )
{
pdf(file= paste(path_figure,"Figure10_supp.pdf",sep=""), width=9*0.8, height=5)
m = matrix(rep(NA,100*100), nrow=100)
m
par(mar=c(1, 1, 2, 0))
plot(imgA, axes=FALSE)
dev.off()
}
# Generate Supplementary Figure 10
source("figure/figure_supp_generator/library_path.R")
resolution = 4
# Pannel A
data5 = read.delim("data/data5_supp.tab")
data5$gene_set = str_replace_all(data5$gene_set,"all,","genes,")
data5[data5$categorie == "POC-matching triplets (POCMT)",]$categorie = "control"
data5[data5$categorie == "Putative optimal codons (POC)",]$categorie = ""
# dt_graph = data5[ data5$species "Musca_domestica" & data5$set != "POCs",]
dt_graph = data5[  data5$set != "POCs" & data5$species %in%  c( "Bactrocera_oleae","Ceratitis_capitata","Bombus_terrestris","Ignelater_luminosus"),]
dt_graph$species = paste(str_replace_all(dt_graph$species,"_"," "),sep="")
pA = ggplot(dt_graph ,
aes(x=fpkm ,y=freq*100,fill=paste(set,categorie),col=paste(set,categorie)))  + geom_point(alpha=0)+
geom_line(data=dt_graph,size=2,aes(linetype=paste(set,categorie))) +
# geom_point(data=dt_graph,pch=21,col="black",size=2)+
scale_fill_manual(values=set_color[c(2,1,4,3)]) +
scale_color_manual(values=set_color[c(2,1,4,3)]) +
scale_shape_manual(values=c(21,22,24,23,25,20))+
scale_linetype_manual(values=c("solid","solid","solid","solid"))+
xlab("Gene expression level (FPKM, log scale)") + ylab("Codon frequency (%)") + theme_bw() + theme(
axis.title.x = element_text(color="black", size=30,family="ubuntu condensed",vjust=0),
axis.title.y = element_text(color="black", size=30, family="ubuntu condensed",vjust=1.7),
axis.text.y =  element_text(color="black", size=25, family="ubuntu condensed"),
axis.text.x =  element_text(color="black", size=25, family="ubuntu condensed"),
title =  element_text(color="black", size=25, family="ubuntu condensed"),
legend.text =  element_text(color="black", size=25, family="ubuntu condensed",margin = margin(t = 5)),
strip.text = element_text(size=15,face="italic")
)+labs(fill='Categories',color='Categories',shape='',linetype='')+
guides(fill = guide_legend(override.aes = list(pch=NA),order = 1),
color = guide_legend(order = 1),
linetype = guide_legend(order = 2),
shape = guide_legend(order = 2),
) + scale_x_log10(
breaks=c(0.01,0.1,1,10,100,1000,10000,50000),
labels=c(0.01,0.1,1,10,100,1000,10000,50000),limits=c(0.005,1000))+ ylim(0.2*100,0.65*100) +
annotation_logticks(sides = "b")+
guides(fill="none",linetype="none",shape="none") +
facet_wrap(~species)
pA
jpeg(paste(path_pannel,"p10A_supp.jpg",sep=""),  width = 10500/2*0.8/2,  5400/2/2,res=600/1.8/2)
print(pA)
dev.off()
# Supplementary Figure 10
imgA = load.image(paste(path_pannel,"p10A_supp.jpg",sep="") )
{
pdf(file= paste(path_figure,"Figure10_supp.pdf",sep=""), width=9*0.8, height=5)
m = matrix(rep(NA,100*100), nrow=100)
m
par(mar=c(1, 1, 2, 0))
plot(imgA, axes=FALSE)
dev.off()
}
