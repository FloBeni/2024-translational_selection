intervalle_FPKM = cut(xaxis, quantile,include.lowest = T,include.higher=T)
FPKM_bins = tapply(xaxis, intervalle_FPKM, median)
for ( type_aa in c( "POC1","POC2","POCs")){
if (type_aa == "POC1" ){
subset_selected = tRNA_optimal[tRNA_optimal$POC1,]
list_POC = subset_selected$codon
list_aa = subset_selected$aa_name
list_codon = tRNA_optimal[tRNA_optimal$aa_name %in% list_aa,]$codon
} else if  (type_aa == "POC2" ){
subset_selected = tRNA_optimal[tRNA_optimal$POC2,]
list_POC = subset_selected$codon
list_aa = subset_selected$aa_name
list_codon = tRNA_optimal[tRNA_optimal$aa_name %in% list_aa,]$codon
} else if  (type_aa == "POCs" ){
subset_selected = tRNA_optimal[tRNA_optimal$POC2 | tRNA_optimal$POC1,]
list_POC = subset_selected$codon
list_aa = subset_selected$aa_name
list_codon = tRNA_optimal[tRNA_optimal$aa_name %in% list_aa,]$codon
}
print(list_POC)
print(list_codon)
POC_obs = rowSums(codon_usage[ list_POC ],na.rm = T)
POC_codon = rowSums(codon_usage[ list_codon ],na.rm = T)
POC_obs_intronic = rowSums(codon_usage[paste(list_POC,'_intronic',sep = "")],na.rm = T)
POC_codon_intronic = rowSums(codon_usage[paste(list_codon,'_intronic',sep = "")],na.rm = T)
data5 = rbind(data5,data.frame(
species,
set = type_aa,
nb_genes = as.numeric(table(intervalle_FPKM)),
freq =  tapply( POC_obs / POC_codon  , intervalle_FPKM , function(x) mean(x,na.rm=T)),
fpkm = FPKM_bins,
categorie = "Putative optimal codons (POC)",
type_aa=paste(type_aa," codons, Nb aa = ",length(list_aa),sep=""),
gene_set = paste("N = " , format(sum(!is.na(POC_obs / POC_codon) ),big.mark=",",scientific=T),sep=""),
nb_poc =  length(list_POC) ,
nb_aa = length(list_aa),
list=paste(list_POC,collapse =";")
))
data5 = rbind(data5,data.frame(
species,
set = type_aa,
nb_genes = as.numeric(table(intervalle_FPKM)),
freq =   tapply( POC_obs_intronic / POC_codon_intronic  , intervalle_FPKM , function(x) mean(x,na.rm=T)),
fpkm = FPKM_bins,
categorie = "POC-matching triplets (POCMT)",
type_aa=paste(type_aa," codons, Nb aa = ",length(list_aa),sep=""),
gene_set=paste("N = " , format(sum(!is.na(POC_obs_intronic / POC_codon_intronic) ),big.mark=",",scientific=T),sep=""),
nb_poc =  length(list_POC),
nb_aa = length(list_aa),
list=paste(list_POC,collapse=";")
))
## Over-used of POC in constraint sites
if (GTDrift_list_species[species,]$clade_group %in% c("Mammalia","Aves","Other Tetrapods")){
data_conservation_sub = data_conservation_rmfirst1000bp[data_conservation_rmfirst1000bp$species == species & data_conservation_rmfirst1000bp$protein %in% codon_usage$protein_id,]
} else {
data_conservation_sub = data_conservation[data_conservation$species == species & data_conservation$protein %in% codon_usage$protein_id,]
}
table_constrain = data.frame(busco_id = data_conservation_sub$busco_id)
for (constrain in c("_highconst","_modconst","_sligconst","_unconst")){
table_constrain[,paste("POC",constrain,sep="")] = rowSums(data_conservation_sub[paste(list_POC,constrain,sep = "")],na.rm = T)
table_constrain[,paste("POC_codon",constrain,sep="")] = rowSums(data_conservation_sub[paste(list_codon,constrain,sep = "")],na.rm = T)
}
data6 = rbind(data6, data.frame(
species,
categorie = "Highly constrained",
set = type_aa,
busco_id=table_constrain$busco_id,
freq = table_constrain$POC_highconst / table_constrain$POC_codon_highconst ,
nb_site = sum(data_conservation_sub$len_high_const_seq),
nb_genes = nrow(data_conservation_sub)
))
data6 = rbind(data6, data.frame(
species,
categorie = "Moderately constrained",
set = type_aa,
busco_id=table_constrain$busco_id,
freq = table_constrain$POC_modconst / table_constrain$POC_codon_modconst ,
nb_site = sum(data_conservation_sub$len_mod_const_seq),
nb_genes = nrow(data_conservation_sub)
))
data6 = rbind(data6, data.frame(
species,
categorie = "Slighlty constrained",
set = type_aa,
busco_id=table_constrain$busco_id,
freq = table_constrain$POC_sligconst / table_constrain$POC_codon_sligconst ,
nb_site = sum(data_conservation_sub$len_slight_const_seq),
nb_genes = nrow(data_conservation_sub)
))
data6 = rbind(data6, data.frame(
species,
categorie = "Unconstrained",
set = type_aa,
busco_id=table_constrain$busco_id,
freq = table_constrain$POC_unconst / table_constrain$POC_codon_unconst ,
nb_site = sum(data_conservation_sub$len_unconst_seq),
nb_genes = nrow(data_conservation_sub)
))
}
}
write.table(data2 , "data/data2_supp.tab",quote=F,row.names = F,sep="\t")
write.table(data3 , "data/data3_supp.tab",quote=F,row.names = F,sep="\t")
write.table(data5 , "data/data5_supp.tab",quote=F,row.names = F,sep="\t")
write.table(data6 , "data/data6_supp.tab",quote=F,row.names = F,sep="\t")
# Generate Data 8 and 9
library(stringi)
code = read.delim(paste("data/standard_genetic_code.tab",sep=""),comment.char = "#")
rownames(code) = code$codon
code = code[code$aa_name != "Ter",]
data7 <- read.table("data/data7_supp.tab",header=T)
GTDrift_list_species = read.delim("data/GTDrift_list_species.tab",comment.char = "#")
rownames(GTDrift_list_species) = GTDrift_list_species$species
all_data = data.frame()
for (species in GTDrift_list_species$species){
dt = data.frame(nb_copy=tapply(code$anticodon,code$aa_name,function(x) sum(data7[species,x])))
dt$aa_name = rownames(dt)
dt$species = species
all_data = rbind(all_data,dt)
}
data9 = cbind(all_data[all_data$species == "Caenorhabditis_elegans", ],all_data[all_data$species == "Hydra_vulgaris", ])
colnames(data9) = c("nb_copy_Caenorhabditis_elegans" ,"aa_name_Caenorhabditis_elegans", "nb_copy_Hydra_vulgaris" ,"aa_name_Hydra_vulgaris")
write.table(data9,"data/data9_supp.tab",quote=F,row.names = F,sep="\t")
# Generate Data 8 and 9
library(stringi)
code = read.delim(paste("data/standard_genetic_code.tab",sep=""),comment.char = "#")
rownames(code) = code$codon
code = code[code$aa_name != "Ter",]
data7 <- read.table("data/data7_supp.tab",header=T)
GTDrift_list_species = read.delim("data/GTDrift_list_species.tab",comment.char = "#")
rownames(GTDrift_list_species) = GTDrift_list_species$species
all_data = data.frame()
for (species in GTDrift_list_species$species){
dt = data.frame(nb_copy=tapply(code$anticodon,code$aa_name,function(x) sum(data7[species,x])))
dt$aa_name = rownames(dt)
dt$species = species
all_data = rbind(all_data,dt)
}
data9 = cbind(all_data[all_data$species == "Caenorhabditis_elegans", ],all_data[all_data$species == "Hydra_vulgaris", ])
colnames(data9) = c("nb_copy_Caenorhabditis_elegans" ,"aa_name_Caenorhabditis_elegans", "species", "nb_copy_Hydra_vulgaris" ,"aa_name_Hydra_vulgaris" ,"species")
data9 = data9[,c("nb_copy_Caenorhabditis_elegans" ,"aa_name_Caenorhabditis_elegans", "nb_copy_Hydra_vulgaris" ,"aa_name_Hydra_vulgaris")]
write.table(data9,"data/data9_supp.tab",quote=F,row.names = F,sep="\t")
tapply(code$anticodon,code$aa_name,function(x) sum(data7[species,x]))
dt = data.frame(nb_copy=tapply(code$anticodon,code$aa_name,function(x) sum(data7[species,x])))
dt
dt = data.frame(nb_copy=tapply(code$anticodon,code$aa_name,function(x) sum(data7[species,x])))
dt$aa_name = rownames(dt)
dt$species = species
dt
data9 = data9[,c("aa_name","nb_copy_Caenorhabditis_elegans" , "nb_copy_Hydra_vulgaris" )]
# Generate Data 8 and 9
library(stringi)
code = read.delim(paste("data/standard_genetic_code.tab",sep=""),comment.char = "#")
rownames(code) = code$codon
code = code[code$aa_name != "Ter",]
data7 <- read.table("data/data7_supp.tab",header=T)
GTDrift_list_species = read.delim("data/GTDrift_list_species.tab",comment.char = "#")
rownames(GTDrift_list_species) = GTDrift_list_species$species
all_data = data.frame()
for (species in GTDrift_list_species$species){
dt = data.frame(nb_copy=tapply(code$anticodon,code$aa_name,function(x) sum(data7[species,x])))
dt$aa_name = rownames(dt)
dt$species = species
all_data = rbind(all_data,dt)
}
data9 = cbind(all_data[all_data$species == "Caenorhabditis_elegans", ],all_data[all_data$species == "Hydra_vulgaris", ])
colnames(data9) = c("nb_copy_Caenorhabditis_elegans" ,"aa_name_Caenorhabditis_elegans", "species", "nb_copy_Hydra_vulgaris" ,"aa_name" ,"species")
data9 = data9[,c("aa_name","nb_copy_Caenorhabditis_elegans" , "nb_copy_Hydra_vulgaris" )]
write.table(data9,"data/data9_supp.tab",quote=F,row.names = F,sep="\t")
# Generate Data 11
options(stringsAsFactors = F, scipen = 999)
library(stringr)
library(stringi)
GTDrift_list_species = read.delim("data/GTDrift_list_species.tab",comment.char = "#")
rownames(GTDrift_list_species) = GTDrift_list_species$species
### tRNA abundance
tRNA_abundance = data.frame()
for (species in GTDrift_list_species$species){
genome_assembly = GTDrift_list_species[species,]$assembly_accession
taxID = GTDrift_list_species[species,]$NCBI.taxid
path = paste("data/per_species/",species,"_NCBI.taxid",taxID,"/",genome_assembly,sep="")
tRNA_optimal = read.delim(paste(path,"/decoding_table.tab.gz",sep=""),comment.char = "#")
dt = t(tRNA_optimal[,c("anticodon","nb_tRNA_copies")])
dt = data.frame(dt)
colnames(dt) = dt[1,]
dt = dt[2,]
rownames(dt) = species
tRNA_abundance = rbind(tRNA_abundance,dt)
}
tRNA_abundance <- data.frame(sapply( tRNA_abundance, as.numeric ))
rownames(tRNA_abundance) = GTDrift_list_species$species
data1 = read.delim("data/data1_supp.tab",comment.char = "#")
data1$clade_group = GTDrift_list_species[data1$species,]$clade_group
data1 = data1[data1$clade_group %in% c("Diptera","Lepidoptera") & data1$species != "Eumeta_japonica" & data1$pval_aa_fpkm < 0.05 & data1$nb_genes_filtered >= 5000 & data1$nb_codon_not_decoded == 0,]
tRNA_abundance = tRNA_abundance[rownames(tRNA_abundance) %in% data1$species,]
code = read.delim(paste("data/standard_genetic_code.tab",sep=""),comment.char = "#")
rownames(code) = code$codon
code = code[!code$aa_name %in% c("Ter"),]
rownames(code) = code$anticodon
data11 = data.frame()
for (anticodon in code$anticodon){
dt = data.frame(species = rownames(tRNA_abundance))
dt$amino_acid = code[anticodon,]$aa
dt$nb_syn = code[anticodon,]$nb_syn
dt$anticodon = anticodon
dt$codon = code[anticodon,]$codon
dt$tRNA_gene_copy = tRNA_abundance[,anticodon]
data11 = rbind(data11,dt)
}
for (species in GTDrift_list_species$species){
genome_assembly = GTDrift_list_species[species,]$assembly_accession
taxID = GTDrift_list_species[species,]$NCBI.taxid
path = paste("data/per_species/",species,"_NCBI.taxid",taxID,"/",genome_assembly,sep="")
tRNA_optimal = read.delim(paste(path,"/decoding_table.tab.gz",sep=""),comment.char = "#")
rownames(tRNA_optimal) = tRNA_optimal$codon
data11[data11$species == species,c("POC1","POC2")] = tRNA_optimal[ data11[data11$species == species,]$codon,c("POC1","POC2")]
}
data11$color = sapply(data11$codon,function(x)substr(x,3,3))
data11$amino_acid = factor(data11$amino_acid,levels = unique(code[order(code$nb_syn,code$anticodon),]$aa))
data11$anticodon = str_replace_all(data11$anticodon,'T','U')
data11$codon = str_replace_all(data11$codon,'T','U')
vect_debut = c("AT","GT","AC","GC","GG","CC","TC","AG","CG","CT","TT","AA","GA","CA","TG","TA")
vect_debut = str_replace_all(vect_debut,"T","U")
data11$title = paste(data11$anticodon,"(",data11$codon,")",sep="")
data11$codon = factor(data11$codon,levels =  unlist(lapply(vect_debut,function(x) paste(x,c("C","U","A","G"),sep=""))) )
data11$title = factor(data11$title,levels= tapply(data11$title, as.integer(data11$codon),unique))
nb_sp = length(unique(data11$species))
data11$nb_species_0 = tapply(data11$tRNA_gene_copy == 0,data11$codon,sum)[data11$codon]
data11$nb_species_0 = round(data11$nb_species_0 / nb_sp*100)
data11$y_axis_0 = tapply(data11$tRNA_gene_copy ,data11$codon,function(x) quantile(x,0.9))[data11$codon]
data11[duplicated(data11$codon) ,]$nb_species_0 = NA
data11[!is.na(data11$nb_species_0),]$nb_species_0 = paste(data11[!is.na(data11$nb_species_0),]$nb_species_0 ,"%")
write.table(data11,"data/data11_supp.tab",quote=F,row.names = F,sep="\t")
# Generate Data 12
code = read.delim(paste("data/standard_genetic_code.tab",sep=""),comment.char = "#")
rownames(code) = code$codon
stop_codon = rownames(code[code$aa_name == "Ter",])
GTDrift_list_species = read.delim("data/GTDrift_list_species.tab",comment.char = "#")
rownames(GTDrift_list_species) = GTDrift_list_species$species
species_list = c( "Bactrocera_oleae","Ceratitis_capitata" , "Hermetia_illucens","Aedes_aegypti"  )
data12 = data.frame()
for (species in species_list){
print(species)
genome_assembly = GTDrift_list_species[species,]$assembly_accession
taxID = GTDrift_list_species[species,]$NCBI.taxid
path = paste("data/per_species/",species,"_NCBI.taxid",taxID,"/",genome_assembly,sep="")
codon_usage = read.delim( paste(path,"/codon_usage_gene_fpkm.txt.gz",sep=""),comment.char = "#")
codon_usage$intern_stop_codon = rowSums(codon_usage[,stop_codon]) - grepl(paste(stop_codon,collapse = "|"),codon_usage$end_codon)
codon_usage = codon_usage[codon_usage$intern_stop_codon == 0 & codon_usage$start_codon == "ATG" & codon_usage$length_cds %% 3 == 0,]
if (quantile(grepl(paste(stop_codon,collapse = "|"),codon_usage$end_codon),0.75) != 0){  # if annotated seq have a stop codon for the majority then remove those that dont
codon_usage = codon_usage[grepl(paste(stop_codon,collapse = "|"),codon_usage$end_codon),] } else { print(species)}
codon_usage = codon_usage[order(codon_usage$length_cds,decreasing = T),]
codon_usage = codon_usage[!duplicated(codon_usage$gene_id),]
codon_usage = codon_usage[!is.na(codon_usage$median_fpkm) ,]
codon_usage = codon_usage[codon_usage$median_fpkm != 0 ,]
xaxis = codon_usage$median_fpkm
proportion = 2/100
quantile = unique( quantile(xaxis, probs = seq(0, 1,proportion),na.rm=T ))
intervalle_FPKM = cut(xaxis, quantile,include.lowest = T,include.higher=T)
FPKM_bins = tapply(xaxis, intervalle_FPKM, median)
aa_name = "Val"
POC_codon = rowSums(codon_usage[ code[code$aa_name == aa_name,]$codon ],na.rm = T)
for (codon in code[code$aa_name == aa_name,]$codon ){
POC_obs = rowSums(codon_usage[ codon ],na.rm = T)
data12 = rbind(data12,data.frame(
species,
aa_name,
codon = codon,
trinucl = substr(codon,3,3),
trinucl2 = substr(codon,1,2),
nb_genes = as.numeric(table(intervalle_FPKM)),
rscu =  tapply( POC_obs / POC_codon * length(code[code$aa_name=="Val",]$codon)  , intervalle_FPKM , function(x) mean(x,na.rm=T)),
fpkm = FPKM_bins
))
}
}
write.table(data12 , "data/data12_supp.tab",quote=F,row.names = F,sep="\t")
# Generate Supplementary Figure 9
source("figure/figure_supp_generator/library_path.R")
data1 = read.delim("data/data1_supp.tab",comment.char = "#")
rownames(data1) = data1$species
data1$clade_group = GTDrift_list_species[data1$species,]$clade_group
data1 = data1[ data1$nb_codon_not_decoded == 0  & data1$pval_aa_fpkm < 0.05 & data1$nb_genes_filtered >= 5000 ,]
data1 = data1[data1$clade_group %in% c("Diptera","Lepidoptera"),]
data1 = data1[data1$species != "Eumeta_japonica",]
data1$species = paste(str_replace_all(data1$species,"_"," "),sep="")
data12 = read.delim("data/data12_supp.tab",comment.char = "#")
data12$species = paste(str_replace_all(data12$species,"_"," "),", GCi=",round(data1[data12$species,]$gci,2),sep="")
substr(data12$codon,3,3)
data12$3rd_nucl = substr(data12$codon,3,3)
data12$third_nucl = substr(data12$codon,3,3)
# Generate Supplementary Figure 9
source("figure/figure_supp_generator/library_path.R")
data1 = read.delim("data/data1_supp.tab",comment.char = "#")
rownames(data1) = data1$species
data1$clade_group = GTDrift_list_species[data1$species,]$clade_group
data1 = data1[ data1$nb_codon_not_decoded == 0  & data1$pval_aa_fpkm < 0.05 & data1$nb_genes_filtered >= 5000 ,]
data1 = data1[data1$clade_group %in% c("Diptera","Lepidoptera"),]
data1 = data1[data1$species != "Eumeta_japonica",]
data1$species = paste(str_replace_all(data1$species,"_"," "),sep="")
data12 = read.delim("data/data12_supp.tab",comment.char = "#")
data12$species = paste(str_replace_all(data12$species,"_"," "),", GCi=",round(data1[data12$species,]$gci,2),sep="")
data12$third_nucl = substr(data12$codon,3,3)
data12$second_nucl = substr(codon,1,2)
# Generate Supplementary Figure 9
source("figure/figure_supp_generator/library_path.R")
data1 = read.delim("data/data1_supp.tab",comment.char = "#")
rownames(data1) = data1$species
data1$clade_group = GTDrift_list_species[data1$species,]$clade_group
data1 = data1[ data1$nb_codon_not_decoded == 0  & data1$pval_aa_fpkm < 0.05 & data1$nb_genes_filtered >= 5000 ,]
data1 = data1[data1$clade_group %in% c("Diptera","Lepidoptera"),]
data1 = data1[data1$species != "Eumeta_japonica",]
data1$species = paste(str_replace_all(data1$species,"_"," "),sep="")
data12 = read.delim("data/data12_supp.tab",comment.char = "#")
data12$species = paste(str_replace_all(data12$species,"_"," "),", GCi=",round(data1[data12$species,]$gci,2),sep="")
data12$third_nucl = substr(data12$codon,3,3)
data12$second_nucl = substr(codon,1,2)
# Pannel A
data12$species = factor(data12$species,levels=paste(data1[order(data1$gci),]$species,", GCi=",round(data1[order(data1$gci),]$gci,2),sep=""))
dt_graph = data12[data12$aa_name == "Val",]
count_dinucl = table(dt_graph$second_nucl)
count_dinucl = count_dinucl[order(count_dinucl,decreasing = T)]
dt_graph[dt_graph$second_nucl == names(count_dinucl[1]),]$third_nucl = paste(dt_graph[dt_graph$second_nucl == names(count_dinucl[1]),]$third_nucl,"1",sep="")
vector = unique(paste(dt_graph$codon))
names( vector ) = unique(paste(dt_graph$third_nucl))
names(set_color) = c("G1","C1","A1","T1","G","C","A","T")
dt_graph$third_nucl = factor(dt_graph$third_nucl,levels = c("G1","A1","T1","C1"))
pA = ggplot(dt_graph,aes(x=fpkm,y=rscu,fill=third_nucl,col=third_nucl)) +geom_line(size=1.5) +
theme_bw() + theme(
axis.title.x = element_text(color="black", size=30,family="ubuntu condensed",vjust=0),
axis.title.y = element_text(color="black", size=30, family="ubuntu condensed",vjust=1.7),
axis.text.y =  element_text(color="black", size=25, family="ubuntu condensed"),
axis.text.x =  element_text(color="black", size=25, family="ubuntu condensed"),
title =  element_text(color="black", size=25, family="ubuntu condensed"),
legend.text =  element_text(color="black", size=25, family="ubuntu condensed",margin = margin(t = 5)),
strip.text = element_text(size=15,face="italic")
)+ xlab("Gene expression level (FPKM, log scale)") +
scale_x_log10(
breaks=c(0.01,0.1,1,10,100,1000,10000,50000),
labels=c(0.01,0.1,1,10,100,1000,10000,50000),limits=c(0.005,1000))+
scale_alpha_manual("Codons",values=c("CDS"=1,"intronic control"=.5)) +
scale_fill_manual("Codons",values=set_color,label=vector)  +
scale_color_manual("Valine\nsynonymous\ncodons",values=set_color,label=vector) +
scale_shape_manual("Codons",values=c("intronic control"=24,"CDS"=21)) +
annotation_logticks(sides = "b")+   facet_wrap(~species) + ylab("RSCU")+labs(fill='Codons',color='Codons',shape='',linetype='')+
guides(fill = guide_legend(order = 1),
color = guide_legend(order = 1,override.aes = list(lwd=3)),
linetype = guide_legend(order = 2),
shape = guide_legend(order = 2),
)
pA
# Generate Supplementary Figure 9
source("figure/figure_supp_generator/library_path.R")
data1 = read.delim("data/data1_supp.tab",comment.char = "#")
rownames(data1) = data1$species
data1$clade_group = GTDrift_list_species[data1$species,]$clade_group
data1 = data1[ data1$nb_codon_not_decoded == 0  & data1$pval_aa_fpkm < 0.05 & data1$nb_genes_filtered >= 5000 ,]
data1 = data1[data1$clade_group %in% c("Diptera","Lepidoptera"),]
data1 = data1[data1$species != "Eumeta_japonica",]
data1$species = paste(str_replace_all(data1$species,"_"," "),sep="")
data12 = read.delim("data/data12_supp.tab",comment.char = "#")
data12$species = paste(str_replace_all(data12$species,"_"," "),", GCi=",round(data1[data12$species,]$gci,2),sep="")
data12$third_nucl = substr(data12$codon,3,3)
data12$second_nucl = substr(codon,1,2)
# Pannel A
data12$species = factor(data12$species,levels=paste(data1[order(data1$gci),]$species,", GCi=",round(data1[order(data1$gci),]$gci,2),sep=""))
dt_graph = data12[data12$aa_name == "Val",]
count_dinucl = table(dt_graph$second_nucl)
count_dinucl = count_dinucl[order(count_dinucl,decreasing = T)]
dt_graph[dt_graph$second_nucl == names(count_dinucl[1]),]$third_nucl = paste(dt_graph[dt_graph$second_nucl == names(count_dinucl[1]),]$third_nucl,"1",sep="")
vector = unique(paste(dt_graph$codon))
names( vector ) = unique(paste(dt_graph$third_nucl))
names(set_color) = c("G1","C1","A1","T1","G","C","A","T")
dt_graph$third_nucl = factor(dt_graph$third_nucl,levels = c("G1","A1","T1","C1"))
pA = ggplot(dt_graph,aes(x=fpkm,y=rscu,fill=third_nucl,col=third_nucl)) +geom_line(size=1.5) +
theme_bw() + theme(
axis.title.x = element_text(color="black", size=30,family="ubuntu condensed",vjust=0),
axis.title.y = element_text(color="black", size=30, family="ubuntu condensed",vjust=1.7),
axis.text.y =  element_text(color="black", size=25, family="ubuntu condensed"),
axis.text.x =  element_text(color="black", size=25, family="ubuntu condensed"),
title =  element_text(color="black", size=25, family="ubuntu condensed"),
legend.text =  element_text(color="black", size=25, family="ubuntu condensed",margin = margin(t = 5)),
strip.text = element_text(size=15,face="italic")
)+ xlab("Gene expression level (FPKM, log scale)") +
scale_x_log10(
breaks=c(0.01,0.1,1,10,100,1000,10000,50000),
labels=c(0.01,0.1,1,10,100,1000,10000,50000),limits=c(0.005,1000))+
scale_alpha_manual("Codons",values=c("CDS"=1,"intronic control"=.5)) +
scale_fill_manual("Codons",values=set_color,label=vector)  +
scale_color_manual("Valine\nsynonymous\ncodons",values=set_color,label=vector) +
scale_shape_manual("Codons",values=c("intronic control"=24,"CDS"=21)) +
annotation_logticks(sides = "b")+   facet_wrap(~species) + ylab("RSCU")+labs(fill='Codons',color='Codons',shape='',linetype='')+
guides(fill = guide_legend(order = 1),
color = guide_legend(order = 1,override.aes = list(lwd=3)),
linetype = guide_legend(order = 2),
shape = guide_legend(order = 2),
)
pA
# Generate Data 12
code = read.delim(paste("data/standard_genetic_code.tab",sep=""),comment.char = "#")
rownames(code) = code$codon
stop_codon = rownames(code[code$aa_name == "Ter",])
GTDrift_list_species = read.delim("data/GTDrift_list_species.tab",comment.char = "#")
rownames(GTDrift_list_species) = GTDrift_list_species$species
species_list = c( "Bactrocera_oleae","Ceratitis_capitata" , "Hermetia_illucens","Aedes_aegypti"  )
data12 = data.frame()
for (species in species_list){
print(species)
genome_assembly = GTDrift_list_species[species,]$assembly_accession
taxID = GTDrift_list_species[species,]$NCBI.taxid
path = paste("data/per_species/",species,"_NCBI.taxid",taxID,"/",genome_assembly,sep="")
codon_usage = read.delim( paste(path,"/codon_usage_gene_fpkm.txt.gz",sep=""),comment.char = "#")
codon_usage$intern_stop_codon = rowSums(codon_usage[,stop_codon]) - grepl(paste(stop_codon,collapse = "|"),codon_usage$end_codon)
codon_usage = codon_usage[codon_usage$intern_stop_codon == 0 & codon_usage$start_codon == "ATG" & codon_usage$length_cds %% 3 == 0,]
if (quantile(grepl(paste(stop_codon,collapse = "|"),codon_usage$end_codon),0.75) != 0){  # if annotated seq have a stop codon for the majority then remove those that dont
codon_usage = codon_usage[grepl(paste(stop_codon,collapse = "|"),codon_usage$end_codon),] } else { print(species)}
codon_usage = codon_usage[order(codon_usage$length_cds,decreasing = T),]
codon_usage = codon_usage[!duplicated(codon_usage$gene_id),]
codon_usage = codon_usage[!is.na(codon_usage$median_fpkm) ,]
codon_usage = codon_usage[codon_usage$median_fpkm != 0 ,]
xaxis = codon_usage$median_fpkm
proportion = 2/100
quantile = unique( quantile(xaxis, probs = seq(0, 1,proportion),na.rm=T ))
intervalle_FPKM = cut(xaxis, quantile,include.lowest = T,include.higher=T)
FPKM_bins = tapply(xaxis, intervalle_FPKM, median)
aa_name = "Val"
aa_count = rowSums(codon_usage[ code[code$aa_name == aa_name,]$codon ],na.rm = T)
for (codon in code[code$aa_name == aa_name,]$codon ){
codon_count = rowSums(codon_usage[ codon ],na.rm = T)
data12 = rbind(data12,data.frame(
species,
aa_name,
codon = codon,
nb_genes = as.numeric(table(intervalle_FPKM)),
rscu =  tapply( codon_count / aa_count * length(code[code$aa_name=="Val",]$codon)  , intervalle_FPKM , function(x) mean(x,na.rm=T)),
fpkm = FPKM_bins
))
}
}
write.table(data12 , "data/data12_supp.tab",quote=F,row.names = F,sep="\t")
# Generate Supplementary Texts Figure 2
source("figure/figure_supptext_generator/library_path.R")
data15_supp = read.delim(paste("data/data15_supp.tab",sep="") , header=T ,comment.char = "#")
# Generate Supplementary Texts Figure 2
source("figure/figure_supptext_generator/library_path.R")
# Pannel A
data15_supp = read.delim(paste("data/data15_supp.tab",sep="") , header=T ,comment.char = "#")
View(data15_supp)
table(data15_supp$per_windows)
View(data15_supp)
options(scipen=999)
library(stringr)
library(ggplot2)
path = "/home/fbenitiere/data/"
GTDrift_list_species = read.delim("data/GTDrift_list_species.tab",comment.char = "#")
rownames(GTDrift_list_species) = GTDrift_list_species$species
data15 = data.frame()
dt = read.delim(paste(path,"Projet-NeGA/translational_selection/GC_gap_per_window_per_species/",species,".tab",sep=""),comment.char = "#")
for (species in GTDrift_list_species$species){print(species)}
dt = read.delim(paste(path,"Projet-NeGA/translational_selection/GC_gap_per_window_per_species/",species,".tab",sep=""),comment.char = "#")
size_windows = 100
value_windows = floor(seq(0,max(dt$start),100)/size_windows) *size_windows+size_windows/2
names(value_windows) = as.character(seq(0,max(dt$start),100))
dt$group = value_windows[as.character(dt$start)]
size_gene = tapply(dt$pos3_sites*3 + dt$posi_sites,dt$busco_id,sum)
dt$length_gene = size_gene[dt$busco_id]
quant = quantile(size_gene,seq(0,1,1))
cut = cut(size_gene,quant,include.lowest = T,include.higher=T)
names(cut) = names(size_gene)
table(cut)
dt$cut = cut[dt$busco_id]
tapply(dt$pos3_sites,paste(dt$from,dt$group,dt$cut)
tapply(dt$pos3_sites,paste(dt$from,dt$group,dt$cut),sum)
tapply(dt$pos3_sites,paste(dt$from,dt$group,dt$cut),sum)
View(dt)
tapply(dt$protein,paste(dt$from,dt$group,dt$cut),function(x) length(unique(x)))
tapply(as.character(dt$cut),paste(dt$from,dt$group,dt$cut),unique)
as.character(dt$cut)
paste(dt$from,dt$group,dt$cut)
tapply(dt$pos3_sites,dt$cut,sum)[tapply(as.character(dt$cut),paste(dt$from,dt$group,dt$cut),unique)] ==  tapply(dt$pos3_sites,dt$cut,sum)[as.character(dt$cut)]
tapply(dt$pos3_sites,dt$cut,sum)[as.character(dt$cut)]
tapply(dt$pos3_sites,dt$cut,sum)
dt$group
# Generate Data 15
options(scipen=999)
library(stringr)
library(ggplot2)
path = "/home/fbenitiere/data/"
# path = "/beegfs/data/fbenitiere/"
GTDrift_list_species = read.delim("data/GTDrift_list_species.tab",comment.char = "#")
rownames(GTDrift_list_species) = GTDrift_list_species$species
data15 = data.frame()
for (species in GTDrift_list_species$species){print(species)
dt = read.delim(paste(path,"Projet-NeGA/translational_selection/GC_gap_per_window_per_species/",species,".tab",sep=""),comment.char = "#")
size_windows = 100
value_windows = floor(seq(0,max(dt$start),100)/size_windows) *size_windows+size_windows/2
names(value_windows) = as.character(seq(0,max(dt$start),100))
dt$group = value_windows[as.character(dt$start)]
dg = data.frame(
species,
per_windows=names(tapply(dt$pos3_sites,paste(dt$from,dt$group),sum)),
nb_genes=tapply(dt$protein,paste(dt$from,dt$group),function(x) length(unique(x))),
pos3_sites = tapply(dt$pos3_sites,paste(dt$from,dt$group),sum),
gc3_count = tapply(dt$gc3_count,paste(dt$from,dt$group),sum),
posi_sites = tapply(dt$posi_sites,paste(dt$from,dt$group),sum),
gci_count = tapply(dt$gci_count,paste(dt$from,dt$group),sum)
)
dg$from = sapply(dg$per_windows,function(x) strsplit(x," ")[[1]][1])
dg$group = as.numeric(sapply(dg$per_windows,function(x) strsplit(x," ")[[1]][2]))
data15 = rbind(data15,dg)
dg$from = factor(dg$from,levels = c("from_5prime" , "from_3prime"))
}
write.table(data15,"data/data15_supp.tab",quote=F,row.names = F,sep="\t")
