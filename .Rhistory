setwd("~/2024-translational_selection")
# Generate Figure 1
source("figure/figure_main_generator/library_path.R")
# Pannel A
arbrePhylotips = arbrePhylo
arbrePhylotips$tip.label <- str_replace_all(arbrePhylotips$tip.label,"_"," ")
edge_group <- str_replace_all(arbrePhylotips$tip.label,"_"," ")
edge_clade <- rep("branch",length(arbrePhylotips$edge[,2]))
for (group in unique(edge_group)){
if (group %in% unlist(listNomSpecies)){
edge_clade[arbrePhylotips$edge[,2] %in% grep(group,edge_group)] =
names(listNomSpecies[unlist(lapply(listNomSpecies,function(x) group %in% x))])
}
}
edge_clade_prev = edge_clade
list_inclusion =  list("Other Metazoans"=c("Diptera","Lepidoptera","Coleoptera","Other Insects","Other Tetrapods","Nematoda","Hymenoptera","Teleostei","Other Metazoans"),
"Other Tetrapods"=c("Aves","Mammalia","Other Tetrapods"),"Other Insects"=c("Diptera","Lepidoptera","Coleoptera","Other Insects","Hymenoptera"),
Nematoda="Nematoda",Teleostei="Teleostei",Hymenoptera="Hymenoptera",Aves="Aves",Mammalia="Mammalia","Diptera"="Diptera","Lepidoptera"="Lepidoptera","Coleoptera"="Coleoptera"
)
clade="Other Metazoans"
for (clade in names(list_inclusion)){
edge_clade[ which.edge(arbrePhylotips,  arbrePhylotips$edge[,2][edge_clade_prev %in% unlist(list_inclusion[clade])] ) ] = clade
}
node_metadata = data.frame(node=arbrePhylotips$edge[,2],color=edge_clade)
node_metadata$color = factor(node_metadata$color, levels = names(Clade_color))
offspring.tbl_tree_item <- utils::getFromNamespace(".offspring.tbl_tree_item", "tidytree") # to use flip deprecated
pA = ggtree(arbrePhylotips,layout="roundrect",size=1) %>% flip(264, 375)
pA <- pA %<+% node_metadata  + aes(color=color) +
scale_color_manual("Clade",values=Clade_color[unique(edge_clade)]) + theme(
panel.background = element_rect(fill = "white", linetype = "dashed")
) + theme(legend.position = "none")
pA
jpeg(paste(path_pannel,"p1A.jpg",sep=""), width = 1500/1, height = 3000/1,res=250/1)
print(pA)
dev.off()
# Pannel B
data1 = read.delim("data/data1_supp.tab")
data1$clade_group = GTDrift_list_species[data1$species,]$clade_group
data1 = read.delim("data/data1_supp.tab",comment.char = "#")
data1$clade_group = GTDrift_list_species[data1$species,]$clade_group
labels = paste(names(tapply(data1$species,data1$clade_group,length))," N=",tapply(data1$species,data1$clade_group,length),sep="")
names(labels) = names(tapply(data1$species,data1$clade_group,length))
data1 = data1[ data1$nb_genes_filtered >= 5000,]
dt_graph = data1
ylabel = "gc3"
xlabel = "gci"
dt_graph = dt_graph[!is.na(dt_graph[,xlabel]) & !is.na(dt_graph[,ylabel]) & dt_graph$species %in% arbrePhylo$tip.label,]
model_to_use = fitted_model(x=dt_graph[,xlabel],y=dt_graph[,ylabel],label=dt_graph$species,tree=arbrePhylo,display_other=F,pagels_obliged=T)
pB = ggplot(dt_graph,aes_string(y=ylabel,x=xlabel,fill="clade_group",label="species")) +
geom_abline(linetype="dashed") +
geom_abline(lwd=1,slope = model_to_use$slope, intercept = model_to_use$intercept)+
geom_point(aes(fill=clade_group),size=3,pch=21,alpha=0.7) + theme_bw() + theme(
axis.title.x = element_text(color="black", size=28,vjust=0.5,family="ubuntu condensed"),
axis.title.y = element_text(color="black", size=28,vjust=1.5, family="ubuntu condensed"),
axis.text.y =  element_text(color="black", size=24, family="ubuntu condensed"),
axis.text.x =  element_text(color="black", size=24, family="ubuntu condensed"),
title =  element_text(color="black", size=20, family="ubuntu condensed"),
text =  element_text(color="black", size=31, family="ubuntu condensed"),
legend.text =  element_text(color="black", size=24, family="ubuntu condensed",vjust = 1.5,margin = margin(t = 10)),
plot.caption = element_text(hjust = 0.59, face= "italic", size=20, family="ubuntu condensed"),
plot.caption.position =  "plot"
)  + scale_fill_manual("Clades",values=Clade_color,labels=labels) +
ylab("GC3") +
xlab("GCi") +
labs(
caption = substitute(paste(model,lambda," :",aic," R"^2,"= ",r2,", p-value ",pvalue,model_non_opti), model_to_use),
title = paste("N = ",nrow(dt_graph)," species",sep="")
)+ theme(legend.position='none')
pB
# Generate Supplementary Figure 2
source("figure/figure_supp_generator/library_path.R")
resolution = 3
data7 <- read.table("data/data7_supp.tab",header=T)
rownames(data7) = str_replace_all(rownames(data7) , "_"," ")
data7
data7 <- read.delim("data/data7_supp.tab",header=T,comment.char = "#")
rownames(data7) = str_replace_all(rownames(data7) , "_"," ")
data7
# Generate Supplementary Figure 2
source("figure/figure_supp_generator/library_path.R")
resolution = 3
data7 <- read.delim("data/data7_supp.tab",header=T,comment.char = "#")
rownames(data7) = str_replace_all(rownames(data7) , "_"," ")
code = read.delim(paste("data/standard_genetic_code.tab",sep=""),comment.char = "#")
rownames(code) = code$anticodon
arbrePhylotips = arbrePhylo
arbrePhylotips$tip.label <- str_replace_all(arbrePhylotips$tip.label,"_"," ")
edge_group <- str_replace_all(arbrePhylotips$tip.label,"_"," ")
edge_clade <- rep("branch",length(arbrePhylotips$edge[,2]))
for (group in unique(edge_group)){
if (group %in% unlist(listNomSpecies)){
edge_clade[arbrePhylotips$edge[,2] %in% grep(group,edge_group)] =
names(listNomSpecies[unlist(lapply(listNomSpecies,function(x) group %in% x))])
}
}
edge_clade_prev = edge_clade
list_inclusion =  list("Other Metazoans"=c("Diptera","Lepidoptera","Coleoptera","Other Insects","Other Tetrapods","Nematoda","Hymenoptera","Teleostei","Other Metazoans"),
"Other Tetrapods"=c("Aves","Mammalia","Other Tetrapods"),"Other Insects"=c("Diptera","Lepidoptera","Coleoptera","Other Insects","Hymenoptera"),
Nematoda="Nematoda",Teleostei="Teleostei",Hymenoptera="Hymenoptera",Aves="Aves",Mammalia="Mammalia","Diptera"="Diptera","Lepidoptera"="Lepidoptera","Coleoptera"="Coleoptera"
)
clade="Other Metazoans"
for (clade in names(list_inclusion)){
edge_clade[ which.edge(arbrePhylotips,  arbrePhylotips$edge[,2][edge_clade_prev %in% unlist(list_inclusion[clade])] ) ] = clade
}
node_metadata = data.frame(node=arbrePhylotips$edge[,2],color=edge_clade)
node_metadata$color = factor(node_metadata$color, levels = names(Clade_color))
offspring.tbl_tree_item <- utils::getFromNamespace(".offspring.tbl_tree_item", "tidytree") # to use flip deprecated
pA = ggtree(arbrePhylotips) %>% flip(264, 375)
pA <- pA %<+% node_metadata  + aes(color=color) +
scale_color_manual("Clade",values=Clade_color[unique(edge_clade)]) + theme(
panel.background = element_rect(fill = "white", linetype = "dashed")
)  + theme(legend.position = "none")
# + geom_tiplab(align=TRUE, linetype='dashed', linesize=.3,size=0)
pA
# tidy the data
tRNA_long <-
data7 %>% rownames_to_column(var='sp') %>%
pivot_longer(cols=!sp,
names_to = 'tRNA',
values_to = "count")
tRNA_long$clade_group = GTDrift_list_species[str_replace_all(tRNA_long$sp," ","_"),]$clade_group
tRNA_long$aa_name = code[tRNA_long$tRNA,]$aa_name
tRNA_long$amino_acid = code[tRNA_long$tRNA,]$aa_name
tRNA_long$anticodon = code[tRNA_long$tRNA,]$anticodon
tRNA_long$codon = code[tRNA_long$tRNA,]$codon
tRNA_long$amino_acid = factor(tRNA_long$aa_name,levels = unique(code[order(code$nb_syn,code$anticodon),]$aa_name))
tRNA_long$anticodon = str_replace_all(tRNA_long$anticodon,'T','U')
tRNA_long$codon = str_replace_all(tRNA_long$codon,'T','U')
vect_debut = c("AT","GT","AC","GC","GG","CC","TC","AG","CG","CT","TT","AA","GA","CA","TG","TA")
vect_debut = str_replace_all(vect_debut,"T","U")
tRNA_long$title = paste(tRNA_long$anticodon,sep="")
tRNA_long$codon = factor(tRNA_long$codon,levels =  unlist(lapply(vect_debut,function(x) paste(x,c("C","U","A","G"),sep=""))) )
tRNA_long$title = factor(tRNA_long$title,levels= tapply(tRNA_long$title, as.integer(tRNA_long$codon),unique))
tRNA_long$color = sapply(tRNA_long$codon,function(x)substr(x,3,3))
tRNA_long$color = paste("NN",tRNA_long$color,sep="")
set_color = c(NNA="#B2DF8A",NNU="#33A02C",NNC="#1F78B4",NNG="#A6CEE3")
b <- ggplot(tRNA_long[!tRNA_long$aa_name %in% c("Ter"),], aes(x=title, y=sp,color=color)) +
geom_point(aes(size=count), stroke = 0) + # stroke=0 so that we don't see the 0, but they are still here
#scale_size(range=c(0, 10)) +
scale_size_area("Gene copy number") +                       # better eye rendering than radius
theme_bw() +
theme(
axis.text.x = element_text(size=5, angle=90),
axis.text.y=element_text(size=3),
panel.grid.major = element_line(color = "grey",
size = 0.1,
linetype = 2),
panel.grid.major.x = element_blank() ,
panel.spacing = unit(0, "lines"),
panel.border = element_rect(color = "grey", fill = NA)) + theme(
title =  element_text(size=20, family="ubuntu condensed"),
legend.text =  element_text(size=20, family="ubuntu condensed"),
strip.text = element_text(size=15, family="ubuntu condensed",face="bold"),
axis.text.x =  element_text( size=5,vjust = 0.5, family="ubuntu condensed"),
axis.title.x =  element_text( size=7),
axis.text.y =  element_text( size=3, family="ubuntu condensed",face="italic"),
plot.title = element_text(hjust = 0.5,margin = margin(0,0,20,0))
) +
xlab("Anticodons") + ylab(NULL)+scale_color_manual("Decoded codons",values = set_color) + facet_wrap(~amino_acid,ncol=length(unique(tRNA_long$amino_acid)),scales="free_x")+
guides(colour = guide_legend(override.aes = list(size=5)))
b
h <- tRNA_long %>% group_by(sp) %>%
summarize(tRNAlociCount = sum(count),clade_group=unique(clade_group)) %>%
ggplot(aes(y=sp, x=tRNAlociCount,fill=clade_group)) +
geom_col(col="black",size=0.1) +
scale_fill_manual("Clades",values=Clade_color[unique(edge_clade)]) +
theme_bw() +
theme(
axis.text.x = element_text(size=7),
panel.grid.major = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()) + theme(
title =  element_text(size=20, family="ubuntu condensed"),
legend.text =  element_text(size=15, family="ubuntu condensed"),
strip.text = element_text(size=15, family="ubuntu condensed",face="bold"),
axis.text.x =  element_text( size=10, family="ubuntu condensed"),
axis.text.y =  element_text( size=0, family="ubuntu condensed"),
plot.title = element_text(hjust = 0.5,margin = margin(0,0,20,0))
)+
xlab(NULL) + ylab(NULL)
h
#make hist
pB = b %>% insert_left(pA, width=0.7) %>% insert_right(h, width=0.4 )
pB
jpeg(paste(path_pannel,"p2A_supp.jpg",sep=""), width = 2000/.2/resolution,  1200/.2/resolution,res=100/.2/resolution)
print(pB)
dev.off()
# Supplementary Figure 2
imgA = load.image(paste(path_pannel,"p2A_supp.jpg",sep="") )
{
pdf(file= paste(path_figure,"Figure2_supp.pdf",sep=""), width=6.75, height=4)
m=matrix(rep(1,10*10), nrow=10)
layout(m)
par(mar=c(0, 1, 0, 0))
plot(imgA, axes=FALSE)
dev.off()
}
# Generate Figure 4
source("figure/figure_main_generator/library_path.R")
resolution=3
# Pannel A
data5 = read.delim("data/data5_supp.tab",comment.char = "#")
data5$gene_set = str_replace_all(data5$gene_set,"all,","genes,")
data5[data5$categorie == "POC-matching triplets (POCMT)",]$categorie = "control"
data5[data5$categorie == "Putative optimal codons (POC)",]$categorie = ""
dt_graph = data5[ data5$species == "Homo_sapiens" & data5$set != "POCs",]
pA = ggplot(dt_graph ,
aes(x=fpkm ,y=freq*100,fill=paste(set,categorie),col=paste(set,categorie)))  + geom_point(alpha=0)+
geom_line(data=dt_graph,size=2,aes(linetype=paste(set,categorie))) +
geom_point(data=dt_graph,pch=21,col="black",size=3)+
scale_fill_manual(values=set_color[c(2,1,4,3)]) +
scale_color_manual(values=set_color[c(2,1,4,3)]) +
scale_shape_manual(values=c(21,22,24,23,25,20))+
scale_linetype_manual(values=c("solid","solid","solid","solid"))+
xlab("Gene expression level (FPKM, log scale)") + ylab("Codon frequency (%)") + theme_bw() + theme(
axis.title.x = element_text(color="black",vjust=0, size=20,family="ubuntu condensed"),
axis.title.y = element_text(color="black",vjust=2, size=20, family="ubuntu condensed"),
axis.text.y =  element_text(color="black", size=20, family="ubuntu condensed"),
axis.text.x =  element_text(color="black", size=20, family="ubuntu condensed"),
title =  element_text(color="black", size=18, family="ubuntu condensed"),
legend.text =  element_text(color="black", size=23, family="ubuntu condensed"),
strip.text = element_text(size=15)
)+labs(fill='Categories',color='Categories',shape='',linetype='')+
guides(fill = guide_legend(override.aes = list(pch=NA),order = 1),
color = guide_legend(order = 1),
linetype = guide_legend(order = 2),
shape = guide_legend(order = 2),
) +
geom_hline(yintercept = mean(dt_graph[dt_graph$fpkm <= median(dt_graph$fpkm) & !grepl("control",dt_graph$categorie) & grepl("POC1",dt_graph$set),]$freq)*100,size=1,linetype="dashed",col="#E31A1C") +
geom_hline(yintercept = mean(dt_graph[dt_graph$fpkm <= median(dt_graph$fpkm) & grepl("control",dt_graph$categorie) & grepl("POC1",dt_graph$set),]$freq)*100,size=1,linetype="dashed",col="#FB9A99") +
geom_point(data =  dt_graph[!grepl("control",dt_graph$categorie) & dt_graph$fpkm == max(dt_graph$fpkm) & grepl("POC1",dt_graph$set) , ],col="black",pch=21,fill="#E31A1C",size=6)+
geom_point(data = dt_graph[grepl("control",dt_graph$categorie) & dt_graph$fpkm == max(dt_graph$fpkm) & grepl("POC1",dt_graph$set), ],col="black",pch=21,fill="#FB9A99",size=6)+
scale_x_log10(
breaks=c(0.01,0.1,1,10,100,1000,10000,50000),
labels=c(0.01,0.1,1,10,100,1000,10000,50000),limits=c(0.005,1000))+ ylim(0.2*100,0.8*100) +
ggtitle(paste(unique(dt_graph$gene_set)," genes",sep="")) + annotation_logticks(sides = "b")+   guides(fill="none",color="none",linetype="none",shape="none")
pA
jpeg(paste(path_pannel,"p4A.jpg",sep=""),  width = 8500/2/resolution,  5400/2/resolution,res=1000/1.8/resolution)
print(pA)
dev.off()
# Pannel B
dt_graph = data5[ data5$species == "Caenorhabditis_elegans" & data5$set != "POCs",]
data1 = read.delim("data/data1_supp.tab",comment.char = "#")
data1$clade_group = GTDrift_list_species[data1$species,]$clade_group
data1 = data1[ data1$nb_codon_not_decoded == 0  & data1$pval_aa_fpkm < 0.05 & data1$nb_genes_filtered >= 5000 ,]
pB = ggplot(dt_graph ,
aes(x=fpkm ,y=100*freq,fill=paste(set,categorie),col=paste(set,categorie)))  + geom_point(alpha=0)+
geom_line(data=dt_graph,size=2,aes(linetype=paste(set,categorie))) +
geom_point(data=dt_graph,pch=21,col="black",size=3)+
scale_fill_manual(values=set_color[c(2,1,4,3,8)]) +
scale_color_manual(values=set_color[c(2,1,4,3,8)]) +
scale_shape_manual(values=c(21,22,24,23,25,20))+
scale_linetype_manual(values=c("solid","solid","solid","solid"))+
xlab("Gene expression level (FPKM, log scale)") + ylab("Codon frequency (%)") + theme_bw() +
theme(
axis.title.x = element_text(color="black",vjust=0, size=20,family="ubuntu condensed"),
axis.title.y = element_text(color="black",vjust=2, size=20, family="ubuntu condensed"),
axis.text.y =  element_text(color="black", size=20, family="ubuntu condensed"),
axis.text.x =  element_text(color="black", size=20, family="ubuntu condensed"),
title =  element_text(color="black", size=18, family="ubuntu condensed"),
legend.text =  element_text(color="black", size=20, family="ubuntu condensed",vjust = 1.5,margin = margin(t = 10)),
legend.title =  element_text(color="black", size=23, family="ubuntu condensed"),
strip.text = element_text(size=15)
)+labs(fill='Categories',color='Categories',shape='',linetype='')+
guides(fill = guide_legend(override.aes = list(pch=NA),order = 1),
color = guide_legend(order = 1),
linetype = guide_legend(order = 2),
shape = guide_legend(order = 2),
)  + scale_x_log10(
breaks=c(0.01,0.1,1,10,100,1000,10000,50000),
labels=c(0.01,0.1,1,10,100,1000,10000,50000),limits=c(0.005,1000))+ ylim(0.2*100,0.8*100) +
geom_hline(yintercept = mean(dt_graph[dt_graph$fpkm <= median(dt_graph$fpkm) & !grepl("control",dt_graph$categorie) & grepl("POC1",dt_graph$set),]$freq)*100,size=1,linetype="dashed",col="#E31A1C") +
geom_hline(yintercept = mean(dt_graph[dt_graph$fpkm <= median(dt_graph$fpkm) & grepl("control",dt_graph$categorie) & grepl("POC1",dt_graph$set),]$freq)*100,size=1,linetype="dashed",col="#FB9A99") +
geom_point(data =  dt_graph[!grepl("control",dt_graph$categorie) & dt_graph$fpkm == max(dt_graph$fpkm) & grepl("POC1",dt_graph$set) , ],col="black",pch=21,fill="#E31A1C",size=6)+
geom_point(data = dt_graph[grepl("control",dt_graph$categorie) & dt_graph$fpkm == max(dt_graph$fpkm) & grepl("POC1",dt_graph$set), ],col="black",pch=21,fill="#FB9A99",size=6)+
ggtitle(paste(unique(dt_graph$gene_set)," genes",sep="")) +   guides(linetype="none",shape="none",fill="none")+ annotation_logticks(sides = "b") +
guides(color = guide_legend(byrow = TRUE,override.aes = list(lwd=5))) +  theme(legend.spacing.y = unit(.1, 'cm'))
# geom_line(data = data.frame(Fop_estimate = Fop_estimation(dt_graph$fpkm),fpkm=dt_graph$fpkm),
#           aes(x=fpkm ,y=100*Fop_estimate,fill="simulation",col="simulation"),size=2)
pB
jpeg(paste(path_pannel,"p4B.jpg",sep=""),  width = 11000/2/resolution,  5500/2/resolution,res=1000/1.8/resolution)
print(pB)
dev.off()
# Pannel C
dt_graph = data1
ylabel = "expressed_overused_background_POC2"
xlabel = "expressed_overused_background_POC1"
dt_graph = dt_graph[!is.na(dt_graph[,xlabel]) & !is.na(dt_graph[,ylabel]) & dt_graph$species %in% arbrePhylo$tip.label,]
model_to_use = fitted_model(x=dt_graph[,xlabel],y=dt_graph[,ylabel],label=dt_graph$species,tree=arbrePhylo,display_other=F,pagels_obliged=T,lm_obliged=F)
pC =  ggplot(dt_graph,aes_string(y=ylabel,x=xlabel,fill="clade_group",label="species"))  +
geom_abline(lwd=1,slope = model_to_use$slope, intercept = model_to_use$intercept)+
geom_abline(linetype="dashed") +
geom_point(aes(fill=clade_group),size=3,pch=21,alpha=.7) + theme_bw() + theme(
axis.title.x = element_text(color="black",vjust=-0, size=25,family="ubuntu condensed"),
axis.title.y = element_text(color="black", size=25, family="ubuntu condensed"),
axis.text.y =  element_text(color="black", size=26, family="ubuntu condensed"),
axis.text.x =  element_text(color="black", size=26, family="ubuntu condensed"),
title =  element_text(color="black", size=20, family="ubuntu condensed"),
text =  element_text(color="black", size=31, family="ubuntu condensed"),
legend.text =  element_text(color="black", size=20, family="ubuntu condensed",vjust = 1.5,margin = margin(t = 10)),
plot.caption = element_text(hjust = 0.35, face= "italic", size=23, family="ubuntu condensed"),
plot.caption.position =  "plot",
legend.title =  element_text(color="black", size=25, family="ubuntu condensed"),
)+ guides(fill = guide_legend(override.aes = list(size=5))) +
labs(
caption = substitute(paste(model,lambda," :",aic," R"^2,"= ",r2,", p-value ",pvalue,model_non_opti), model_to_use),
title = paste("N = ",nrow(dt_graph)," species",sep="")
)  + scale_fill_manual("Clades",values=Clade_color) +
xlab(substitute(paste(Delta," POC"[1]^"exp")))  +
ylab(substitute(paste(Delta," POC"[2]^"exp")))  + scale_y_continuous(breaks = seq(-10,50,10))
# + theme(legend.position='none')
pC
jpeg(paste(path_pannel,"p4C.jpg",sep=""),width = 5200/2/resolution, height = 4000/2/resolution,res=600/2/resolution)
print(pC)
dev.off()
# Pannel D
dt_graph = data.frame(
species = c(data1$species,data1$species),
clade_group = c(data1$clade_group,data1$clade_group),
category = c(rep("POC1",nrow(data1)), rep("POC2",nrow(data1))),
value = c(data1$expressed_overused_background_POC1,data1$expressed_overused_background_POC2))
dt_graph$clade_group_facet = str_replace_all(dt_graph$clade_group," ","\n")
dt_graph$clade_group_facet = factor(dt_graph$clade_group_facet, levels = str_replace_all(names(Clade_color)," ","\n"))
pD = ggplot(dt_graph,aes(y=value,x=category,label=species,fill=clade_group))  +
geom_hline(size=1,linetype="dashed",col="red", yintercept = 0 ) + geom_point(size=2,pch=21,alpha=.7)+
geom_boxplot(alpha=.1)  + facet_wrap(~clade_group_facet,scales="free_x",ncol=11)+ theme_bw() + theme(
axis.title.x = element_text(color="black", size=25,family="ubuntu condensed"),
axis.title.y = element_text(color="black",vjust=1.5, size=30, family="ubuntu condensed"),
axis.text.y =  element_text(color="black", size=25, family="ubuntu condensed"),
axis.text.x =  element_text(color="black", size=18, family="ubuntu condensed",angle=30,vjust=0.5),
legend.text =  element_text(color="black", size=10, family="ubuntu condensed"),
strip.text = element_text(size=13, family="ubuntu condensed",face="bold"),
title =  element_text(size=10, family="ubuntu condensed"),
panel.spacing = unit(0, "lines"),
panel.border = element_rect(color = "grey", fill = NA)
# strip.background = element_rect(color = "grey", size = 1)
) + ylab(substitute(paste(Delta," POC"^"exp"))) +
theme(legend.position='none') + scale_fill_manual(values=Clade_color) + xlab("")
pD
# Difference in proportion of POC between\nthe top 5% and bottom 50% expressed (%)
jpeg(paste(path_pannel,"p4D.jpg",sep=""), width = 5500/1/resolution, height = 3000/1/resolution,res=460/1/resolution)
print(pD)
dev.off()
# Figure 4
imgA = load.image(paste(path_pannel,"p4A.jpg",sep="") )
imgB = load.image(paste(path_pannel,"p4B.jpg",sep="") )
imgC = load.image(paste(path_pannel,"p4C.jpg",sep="") )
imgD = load.image(paste(path_pannel,"p4D.jpg",sep="") )
human<-readPNG(paste(path_require,"human.png",sep=""))
Caenorhabditis_elegans = readPNG(paste(path_require,"Caenorhabditis_elegans.png",sep=""))
# Drosophila_melanogaster = readPNG(paste(path_require,"Drosophila_melanogaster.png",sep=""))
# clade_png<-readPNG(paste(path_require,"clade.png",sep=""))
{
pdf(file= paste(path_figure,"Figure4.pdf",sep=""), width=9, height=5.6)
m = matrix(rep(NA,100*100), nrow=100)
for(i in 1:50){
m[i,]=c(rep(1,48),rep(2,100-48))
}
for(i in 50:100){
m[i,]=c(rep(3,40),rep(4,60))
}
layout(m)
m
par(mar=c(1, 1, 2, 0))
plot(imgA, axes=FALSE)
mtext("A",at=0,adj=-0.2, side=2, line=1, font=2, cex=1.7,las=2)
xhuman = 470/resolution
yhuman = -350/resolution
rasterImage(human,xleft=0+xhuman, ybottom=450/.9/resolution-yhuman, xright=190/.9/resolution+xhuman, ytop=0-yhuman)
par(mar=c(0, 0, 1, 0))
plot(imgB, axes=FALSE)
mtext("B",at=0,adj=0.5/resolution, side=2, line=1, font=2, cex=1.7,las=2)
xcel=500/resolution
ycel=-350/resolution
rasterImage(Caenorhabditis_elegans,xleft=0+xcel, ybottom=350/1.5/resolution-ycel, xright=1000/1.5/resolution+xcel, ytop=0-ycel)
par(mar=c(0,0, 1, 0))
plot(imgC, axes=FALSE)
mtext("C",at=0,adj=-2.5/resolution, side=2, line=1, font=2, cex=1.7,las=2)
par(mar=c(0,1, 1, 0))
plot(imgD, axes=FALSE)
mtext("D",at=0,adj=0, side=2, line=1, font=2, cex=1.7,las=2)
dev.off()
}
