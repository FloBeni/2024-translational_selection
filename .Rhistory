pB =  ggplot(dt_graph,aes_string(y=ylabel,x=xlabel))  +
# geom_boxplot(data=dt_graph , aes_string(x="group", y= ylabel,group="group"),outlier.shape = NA ,pch=21,fill=set_color[5],size=1)+
# geom_point(data=average_data , aes(x=x, y= y, group="moyenne"  ),pch=21,fill=set_color[7],size=8)+
# geom_errorbarh(data=average_data ,aes( xmin=x-sdx,xmax=x+sdx,x=x,y=y,group="moyenne"),height=0.02, size=1,col=set_color[7])+
geom_point(aes(fill=clade_group),size=4,pch=21,alpha=.8) + theme_bw() + theme(
axis.title.x = element_text(color="black", size=25,vjust=0,family="ubuntu condensed"),
axis.title.y = element_text(color="black", size=25,vjust=2, family="ubuntu condensed"),
axis.text.y =  element_text(color="black", size=23, family="ubuntu condensed"),
axis.text.x =  element_text(color="black", size=23, family="ubuntu condensed"),
title =  element_text(color="black", size=20, family="ubuntu condensed"),
text =  element_text(color="black", size=31, family="ubuntu condensed"),
legend.text =  element_text(color="black", size=20, family="ubuntu condensed",vjust = 1,margin = margin(t = 5)),
legend.title = element_text(color="black", size=20, family="ubuntu condensed"),
plot.caption = element_text(hjust = 0.59, face= "italic", size=20, family="ubuntu condensed"),
plot.caption.position =  "plot"
)+ guides(fill = guide_legend(override.aes = list(size=5))) +
labs(
caption = substitute(paste(model,lambda," :",aic," R"^2,"= ",r2,", p-value ",pvalue,model_non_opti), model_to_use),
title = paste("N = ",nrow(dt_graph)," species",sep="")
) + theme(legend.position='none') + scale_fill_manual("Clades",values=Clade_color) +
ylab("Average NNC of\npreferred codons (NNT/NNC)") +
xlab("GCi") +   theme(legend.position = c(0.87, 0.15),
legend.background = element_rect(fill="NA"),
legend.spacing.x = unit(0.1, 'cm'),
legend.spacing.y = unit(0.1, 'cm'),
legend.box.background = element_rect(colour = "black")
)
pB
jpeg(paste(path_pannel,"p8B.jpg",sep=""),width = 5200/2, height = 4000/2,res=700/2)
print(pB)
dev.off()
# Figure 7
imgA = load.image(paste(path_pannel,"p8A.jpg",sep="") )
imgB = load.image(paste(path_pannel,"p8B.jpg",sep="") )
imgC = load.image(paste(path_require,"hypothesis.png",sep=""))
fly<-readPNG(paste(path_require,"fly.png",sep=""))
{
pdf(file= paste(path_figure,"Figure8.pdf",sep=""), width=10, height=8*2/2)
m = matrix(rep(NA,2*2), nrow=2)
m[1,]=c(1,2)
m[2,]=c(3,3)
layout(m)
par(mar=c(0,2, 2, 0))
plot(imgA, axes=FALSE)
mtext("A",at=-100,adj=0, side=2, line=1, font=2, cex=2,las=2)
xaxis=2230
yaxis=150
rasterImage(fly,xleft=0+xaxis, ybottom=0+yaxis, xright=1200/5+xaxis, ytop=-900/5+yaxis)
plot(imgB, axes=FALSE)
mtext("B",at=-100,adj=0, side=2, line=1, font=2, cex=2,las=2)
xaxis=2230
yaxis=150
rasterImage(fly,xleft=0+xaxis, ybottom=0+yaxis, xright=1200/5+xaxis, ytop=-900/5+yaxis)
par(mar=c(0, 1, 0, 1))
plot(imgC, axes=FALSE)
mtext("C",at=100,adj=-1, side=2, line=1, font=2, cex=2,las=2)
dev.off()
}
# Generate Data 1
library(stringi)
path_data = "/home/fbenitiere/data/"
# busco_tab = read.delim("/home/fbenitiere/data/Projet-SplicedVariants/DnDs/Metazoa_clades_v2/gene_No_aas_cds")
# rownames(busco_tab) = busco_tab$species
data_conservation = read.delim(paste("data/compilation_prop_gap_pergene_25_50_75.tab.gz",sep=""))
data_conservation_rmfirst1000bp = read.delim(paste("data/compilation_prop_gap_pergene_25_50_75_rmfirst1000bp.tab.gz",sep=""))
stderror <- function(x) sd(x , na.rm = T)/sqrt(length(x[!is.na(x)] ))
code = read.delim(paste("data/standard_genetic_code.tab",sep=""))
rownames(code) = code$codon
stop_codon = rownames(code[code$aa_name == "Ter",])
wobble_pairing = c("C"="IC","T"="GU","G"="UG","A"="IA")
wobble_associat_wc = list("T"="C",
"A"="A",
"G"="A",
"C"="T")
GTDrift_list_species = read.delim("data/GTDrift_list_species.tab")
rownames(GTDrift_list_species) = GTDrift_list_species$species
data1 = data.frame()
data_codons = data.frame()
GTDrift_list_species = GTDrift_list_species[GTDrift_list_species$clade_group=="Teleostei",]
data1 = data.frame()
data_codons = data.frame()
for (species in GTDrift_list_species$species){
dt_species = data.frame()
print(species)
genome_assembly = GTDrift_list_species[species,]$assembly_accession
taxID = GTDrift_list_species[species,]$NCBI.taxid
path = paste("data/per_species/",species,"_NCBI.taxid",taxID,"/",genome_assembly,sep="")
if (
file.exists(paste(path,"/tRNA_from_GFF.tab.gz",sep="")) &
file.size(paste(path,"/tRNA_from_GFF.tab.gz",sep="")) != 38 ){ # if non empty
tRNA_GFF = T
} else if (
file.exists(paste(path,"/tRNAscan_SE.tab.gz",sep="")) &
file.size(paste(path,"/tRNAscan_SE.tab.gz",sep="")) != 36  ){ # if non empty
tRNA_GFF = F
}
codon_usage = read.delim( paste(path,"/codon_usage_gene_fpkm.tab.gz",sep="") )
nb_genes = length(unique(codon_usage$gene_id))
codon_usage$length = rowSums(codon_usage[ , 3:66]) * 3
codon_usage$intern_stop_codon = rowSums(codon_usage[,stop_codon]) - grepl(paste(stop_codon,collapse = "|"),codon_usage$end_codon)
codon_usage = codon_usage[codon_usage$intern_stop_codon == 0 & codon_usage$start_codon == "ATG" & codon_usage$length_cds %% 3 == 0,]
if (quantile(grepl(paste(stop_codon,collapse = "|"),codon_usage$end_codon),0.75) != 0){  # if annotated seq have a stop codon for the majority then remove those that dont
codon_usage = codon_usage[grepl(paste(stop_codon,collapse = "|"),codon_usage$end_codon),] } else { print(species)}
codon_usage = codon_usage[order(codon_usage$length_cds,decreasing = T),]
codon_usage = codon_usage[!duplicated(codon_usage$gene_id),]
codon_usage = codon_usage[!is.na(codon_usage$median_fpkm) ,]
prop_cds_expressed = nrow(codon_usage[codon_usage$median_fpkm != 0 ,]) / nrow(codon_usage)
codon_usage = codon_usage[codon_usage$median_fpkm != 0 ,]
observation = colSums( codon_usage[3:70] * codon_usage$median_fpkm , na.rm = T )
tRNA_optimal = read.delim(paste(path,"/decoding_table.tab.gz",sep=""))
rownames(tRNA_optimal) = tRNA_optimal$codon
tRNA_optimal = tRNA_optimal[tRNA_optimal$aa_name != "Ter",]
nb_codon_not_decoded = sum(!tRNA_optimal$decoded)
aa_data = data.frame()
for (amino_acid in unique(code$aa_name)){
codon_used = rownames(code[code$aa_name == amino_acid,])
aa_data = rbind(aa_data,
data.frame(
amino_acid ,
letter_aa = unique(code[code$aa_name == amino_acid,]$aa) ,
tRNASE_copies= sum(tRNA_optimal[codon_used,]$nb_tRNA_copies,na.rm = T),
obs_codon = sum(observation[codon_used])
))
}
aa_data = aa_data[!grepl("Ter",aa_data$amino_acid) ,]
spearman_method_aa = cor.test( aa_data$tRNASE_copies, aa_data$obs_codon,method="spearman",exact=F)
## Selectionner les tRNA + abondant pour les duet XXA-XXG
abond_AG = tRNA_optimal[!tRNA_optimal$aa_name %in% c("Met","Trp","Ile"),]
abond_AG = abond_AG[substr(abond_AG$codon,3,3) %in% c("A","G"),]
abond_AG = abond_AG[order(abond_AG$nb_tRNA_copies,decreasing = T),]
# abond_AG = abond_AG[ !abond_AG$aa_name_scu %in% abond_AG[abond_AG$nb_tRNA_copies == 0,]$aa_name_scu,]
abond_AG = abond_AG[ abond_AG$aa_name_scu %in% c("Lys","Glu","Leu_4" ,"Gln","Val","Thr","Pro","Leu_2" ,"Ser_4", "Arg_2", "Ala" ),]
vector = (tapply(abond_AG$nb_tRNA_copies , abond_AG$aa_name_scu,function(x) sum(x == max(x))))
abond_AG = abond_AG[abond_AG$aa_name_scu %in% names(vector[vector != 2]),]
abond_AG = abond_AG[!duplicated(paste(abond_AG$aa_name_scu)),]$codon
print(length(abond_AG))
GCi_obs = rowSums(codon_usage[c("Ci","Gi")],na.rm = T)
ATGCi_obs = rowSums(codon_usage[c("Ai","Ti","Ci","Gi")],na.rm = T)
GC3_obs = rowSums(codon_usage[c("C3","G3")],na.rm = T)
ATGC3_obs = rowSums(codon_usage[c("A3","T3","C3","G3")],na.rm = T)
gc3 = (GC3_obs / ATGC3_obs)
gci = (GCi_obs / ATGCi_obs)
gci_expressed_10percent = (gci)[codon_usage$median_fpkm >= quantile(codon_usage$median_fpkm , probs = 0.9)]
model_lm = lm( gc3 ~  gci)
spearman_method_gc3gci = cor.test( gc3, gci,method = "spearman",exact=F)
xaxis = codon_usage$median_fpkm
proportion = 2/100
quantile = unique( quantile(xaxis, probs = seq(0, 1,proportion),na.rm=T ))
intervalle_FPKM = cut(xaxis, quantile,include.lowest = T,include.higher=T)
# print(mean(table(intervalle_FPKM)))
FPKM_bins = tapply(xaxis, intervalle_FPKM, median)
## Translational selection signal
data_optiplus = data.frame()
for ( amino_acid in unique(tRNA_optimal[ tRNA_optimal$nb_syn >= 2,]$aa_name)){
codon_used = rownames(tRNA_optimal[tRNA_optimal$aa_name == amino_acid,])
amino_acid_count = rowSums(codon_usage[codon_used],na.rm = T)
triplet_intronic = rowSums(codon_usage[paste(codon_used,'_intronic',sep = "")],na.rm = T)
for ( codon in codon_used ){
COA_obs =  unlist(codon_usage[codon])
COA_neg_obs = amino_acid_count
COA_obs_intronic =  unlist(codon_usage[paste(codon,'_intronic',sep = "")])
COA_neg_obs_intronic = triplet_intronic
data_optiplus = rbind(data_optiplus,data.frame(
species,
amino_acid,
codon,
aa_name_scu = tRNA_optimal[codon,]$aa_name_scu,
expressed_overused_background = (round(tapply( COA_obs / COA_neg_obs , intervalle_FPKM , function(x) mean(x,na.rm=T))[length(FPKM_bins)],5) -
round( mean( (COA_obs / COA_neg_obs)[codon_usage$median_fpkm <= median(codon_usage$median_fpkm )] , na.rm=T) , 5)) - (
round(tapply( COA_obs_intronic / COA_neg_obs_intronic   , intervalle_FPKM , function(x) mean(x,na.rm=T))[length(FPKM_bins)],5) -
round( mean( (COA_obs_intronic / COA_neg_obs_intronic)[codon_usage$median_fpkm <= median(codon_usage$median_fpkm )] , na.rm=T),5)
)
))
}
}
data_optiplus = data_optiplus[order(data_optiplus$expressed_overused_background,decreasing = T),]
data_optiplus = data_optiplus[order(data_optiplus$amino_acid,decreasing = F),]
data_optiplus$rank = unlist(tapply(data_optiplus$expressed_overused_background,data_optiplus$amino_acid , function(x) rev(rank(x))))
## Faire mieux
data_optiplus$nb_tRNA_copies = tRNA_optimal[data_optiplus$codon,]$nb_tRNA_copies
data_codons = rbind(data_codons,data_optiplus)
DUC_IC = data_optiplus[substr(data_optiplus$codon,3,3) %in% c("C","T"),]
DUC_IC = DUC_IC[ DUC_IC$aa_name_scu %in% DUC_IC[DUC_IC$nb_tRNA_copies == 0,]$aa_name_scu,]
DUC_IC = DUC_IC[!duplicated(DUC_IC$aa_name_scu),]$codon
table(substr(DUC_IC,3,3))
dt_species = rbind(dt_species,data.frame(
species,
tRNA_GFF,
prop_cds_expressed,
nb_genes,
nb_genes_filtered = nrow(codon_usage),
nb_codon_not_decoded,
rho_aa_fpkm = spearman_method_aa$estimate,
pval_aa_fpkm = spearman_method_aa$p.value,
rho_gc3_gci = spearman_method_gc3gci$estimate,
pval_gc3_gci = spearman_method_gc3gci$p.value,
g_abond_ag = sum(substr(abond_AG,3,3) %in% c("G")) / length(abond_AG),
c_duc_ic = sum(substr(DUC_IC,3,3) %in% c("C")) / length(DUC_IC),
gc3 = mean(gc3,na.rm=T),
var_gc3 = var(gc3,na.rm=T),
gci = mean(gci,na.rm=T),
std_gci = stderror(gci),
var_gci = var(gci,na.rm=T),
var_gci_exp = var(gci_expressed_10percent,na.rm=T)
) )
### Translational selection intensity
for ( type_aa in c( "POC1","POC2","POCs")){
if (type_aa == "POC1" ){
subset_selected = tRNA_optimal[tRNA_optimal$POC1,]
list_POC = subset_selected$codon
list_aa = unique(subset_selected$aa_name)
list_codon = tRNA_optimal[tRNA_optimal$aa_name %in% list_aa,]$codon
} else if  (type_aa == "POC2" ){
subset_selected = tRNA_optimal[tRNA_optimal$POC2,]
list_POC = subset_selected$codon
list_aa = unique(subset_selected$aa_name)
list_codon = tRNA_optimal[tRNA_optimal$aa_name %in% list_aa,]$codon
} else if  (type_aa == "POCs" ){
subset_selected = tRNA_optimal[tRNA_optimal$POC2 | tRNA_optimal$POC1,]
list_POC = subset_selected$codon
list_aa = unique(subset_selected$aa_name)
list_codon = tRNA_optimal[tRNA_optimal$aa_name %in% list_aa,]$codon
}
if ( length(list_POC) != 0 ){
##### Over-used of POC in expressed genes
POC_obs = rowSums(codon_usage[ list_POC ],na.rm = T)
POC_codons_obs = rowSums(codon_usage[ list_codon ],na.rm = T)
POC_obs_intronic = rowSums(codon_usage[paste(list_POC,'_intronic',sep = "")],na.rm = T)
POC_codons_obs_intronic = rowSums(codon_usage[paste(list_codon,'_intronic',sep = "")],na.rm = T)
## Over-used of POC in constraint sites
if (GTDrift_list_species[species,]$clade_group %in% c("Mammalia","Aves","Other Tetrapods","Teleostei")){
data_conservation_sub = data_conservation_rmfirst1000bp[data_conservation_rmfirst1000bp$species == species & data_conservation_rmfirst1000bp$protein %in% codon_usage$protein_id,]
} else {
data_conservation_sub = data_conservation[data_conservation$species == species ,]
}
table_constrain = data.frame(busco_id = data_conservation_sub$busco_id)
for (constrain in c("_highconst","_modconst","_sligconst","_unconst")){
table_constrain[,paste("POC",constrain,sep="")] = rowSums(data_conservation_sub[paste(list_POC,constrain,sep = "")],na.rm = T)
table_constrain[,paste("POC_codon",constrain,sep="")] = rowSums(data_conservation_sub[paste(list_codon,constrain,sep = "")],na.rm = T)
}
poc_exp_genes = (POC_obs / POC_codons_obs)[intervalle_FPKM == names(FPKM_bins)[length(FPKM_bins)]]
poc_noexp_genes = (POC_obs / POC_codons_obs)[codon_usage$median_fpkm <= median(codon_usage$median_fpkm )]
Fpoc_expressed = round(mean(poc_exp_genes,na.rm = T),5)
Fpoc_noexpressed = round(mean(poc_noexp_genes,na.rm = T),5)
dt_inter_err = data.frame()
for (i in 1:1000){
dt_inter_err = rbind(dt_inter_err,data.frame(
S = log( mean( sample(poc_exp_genes, replace = T),na.rm=T)/(1 - mean( sample(poc_exp_genes, replace = T),na.rm=T))) - log(mean( sample(poc_noexp_genes, replace = T),na.rm=T)/(1 - mean( sample(poc_noexp_genes, replace = T),na.rm=T)))
))
}
dt_translational_selection = data.frame(
nb_aa = length(list_aa),
nb_genes_per_bins = mean(table(intervalle_FPKM)),
nb_busco = nrow(table_constrain),
S = log(Fpoc_expressed/(1-Fpoc_expressed)) - log(Fpoc_noexpressed/(1-Fpoc_noexpressed)),
S_int_025 = quantile(dt_inter_err$S,c(0.025)),
S_int_975 = quantile(dt_inter_err$S,c(0.975)),
expressed_overused = 100 * (Fpoc_expressed - Fpoc_noexpressed) ,
expressed_overused_background = 100 * ((Fpoc_expressed - Fpoc_noexpressed) - (
round(tapply( POC_obs_intronic / POC_codons_obs_intronic   , intervalle_FPKM , function(x) mean(x,na.rm=T))[length(FPKM_bins)],5) -
round( mean( (POC_obs_intronic / POC_codons_obs_intronic)[codon_usage$median_fpkm <= median(codon_usage$median_fpkm )] , na.rm=T),5)
)),
# constraint_overused = 100*(mean(table_constrain$POC_highconst/table_constrain$POC_codon_highconst ,na.rm = T) - mean(table_constrain$POC_unconst/table_constrain$POC_codon_unconst,na.rm = T))
constraint_overused = 100 * mean(table_constrain$POC_highconst/table_constrain$POC_codon_highconst - table_constrain$POC_unconst/table_constrain$POC_codon_unconst,na.rm = T)
)
} else {
dt_translational_selection = data.frame(
nb_aa = 0,
nb_genes_per_bins = NA,
nb_busco = NA,
S = NA,
S_int_025 = NA,
S_int_975 = NA,
expressed_overused = NA,
expressed_overused_background = NA,
constraint_overused = NA
)
}
colnames(dt_translational_selection) = paste(colnames(dt_translational_selection),type_aa,sep="_")
dt_species = cbind(dt_species,dt_translational_selection)
}
data1 = rbind(data1,dt_species)
}
test=data1
data1 = read.delim("data/data1_supp.tab")
data1 = data1[!data1$species %in%GTDrift_list_species$species,]
rbind(data1,testdata1 = )
data1 =rbind(data1,test )
write.table(data1,"data/data1_supp.tab",quote=F,row.names = F,sep="\t")
data1 = read.delim("data/data1_supp.tab")
data1$clade_group = GTDrift_list_species[data1$species,]$clade_group
data1 = data1[ data1$nb_codon_not_decoded == 0  & data1$pval_aa_fpkm < 0.05 & data1$nb_genes_filtered >= 5000 ,]
pC = ggplot(data1,aes(y=constraint_overused_POCs,x=clade_group,fill=clade_group))  +
geom_hline(size=1,linetype="dashed",col="red",
yintercept = 0 ) +
geom_boxplot(alpha=.1) +
geom_point(aes(fill=clade_group),size=3,pch=21,alpha=0.7) + theme_bw() + theme(
axis.title.x = element_text(color="black",angle = 50, size=25,family="economica"),
axis.title.y = element_text(color="black", size=27, family="economica"),
axis.text.y =  element_text(color="black", size=22, family="economica"),
axis.text.x =  element_text(color="black",vjust=1,hjust=1, size=22,angle = 30, family="economica"),
title =  element_text(color="black", size=15, family="economica"),
legend.text =  element_text(color="black", size=20, family="economica")
) + scale_fill_manual("Clades",values=Clade_color)+
ylab(substitute(paste(Delta," POC"^"cons"))) + xlab("") + theme(legend.position='none')
# ylab("Difference in POC proportion between\nthe 25% highest and the 25% lowest constrained sites") +
pC
# Generate Figure 5
source("figure/figure_main_generator/library_path.R")
# Pannel 5 A
data6 = read.delim("data/data6_supp.tab")
data6$categorie = factor(data6$categorie,levels = rev( unique(data6$categorie)))
dt_graph = data6[data6$species == "Homo_sapiens" & data6$type_aa == "POCs",]
# dt_graph = data6[data6$species == "Drosophila_melanogaster",]
pA = ggplot( dt_graph ,
aes(y=freq,fill=categorie))  +
geom_boxplot(outlier.shape = NA) +
scale_fill_manual(values=set_color[c(4,3,5,6)]) +
scale_shape_manual(values=c(24,22,21,23,25,20))+
xlab("Constrain") + ylab("POC frequency") + theme_bw() + theme(
axis.title.x = element_text(color="black", size=25,family="economica"),
axis.title.y = element_text(color="black", size=25, family="economica"),
axis.text.y =  element_text(color="black", size=20, family="economica"),
axis.text.x =  element_text(color="black", size=0, family="economica"),
title =  element_text(color="black", size=18, family="economica"),
legend.text =  element_text(color="black", size=20, family="economica"),
strip.text = element_text(size=15),
plot.caption = element_text(hjust = 0.42, face= "italic", size=18, family="economica"),
plot.caption.position =  "plot"
) + scale_x_log10() + ggtitle(paste("N = " ,dt_graph$nb_genes[1]," BUSCO genes",sep="")) +
guides(fill = guide_legend(override.aes = list(pch=NA),order = 1),
color = guide_legend(order = 1),
linetype = guide_legend(order = 2),
shape = guide_legend(order = 2),
) + theme(legend.position='none') + xlab("") + coord_cartesian(ylim=c(0.2,0.8))
pA
jpeg(paste(path_pannel,"p5A.jpg",sep=""),  width = 6200/2,  8000/2,res=900)
print(pA)
dev.off()
# Pannel 5 B
dt_graph = data6[data6$species == "Caenorhabditis_elegans" & data6$type_aa == "POCs",]
pB = ggplot( dt_graph ,
aes(y=freq,fill=categorie))  +
# geom_line(data=dt_graph[dt_graph$categorie %in% c("Highly constrained","Unconstrained"),],aes(group=busco_id),alpha=0.2,col="black",linetype="dashed")+
geom_boxplot(outlier.shape = NA) +
scale_fill_manual("Binning of codons per quartile\nof amino-acid constraint",values=set_color[c(4,3,5,6)],labels=c( "Unconstrained" = "25% least constrained" ,
"Slighlty constrained" = "25-50%" ,
"Moderately constrained" = "50-75%"  ,
"Highly constrained" = "25% most constrained")) +
scale_shape_manual(values=c(24,22,21,23,25,20)) +
xlab("Constrain") + ylab("POC frequency") + theme_bw() + theme(
axis.title.x = element_text(color="black", size=25,family="economica"),
axis.title.y = element_text(color="black", size=25, family="economica"),
axis.text.y =  element_text(color="black", size=20, family="economica"),
axis.text.x =  element_text(color="black", size=0, family="economica"),
title =  element_text(color="black", size=18, family="economica"),
legend.text =  element_text(color="black", size=20, family="economica"),
strip.text = element_text(size=15),
plot.caption = element_text(hjust = 0.42, face= "italic", size=18, family="economica"),
plot.caption.position =  "plot"
)  + ggtitle(paste("N = " ,dt_graph$nb_genes[1]," BUSCO genes",sep="")) +
guides(fill = guide_legend(override.aes = list(pch=NA),order = 1),
color = guide_legend(order = 1),
linetype = guide_legend(order = 2),
shape = guide_legend(order = 2),
)+ xlab("") + coord_cartesian(ylim=c(0.2,0.8)) +
theme(legend.spacing.y = unit(.4, 'cm'))   +
guides(fill = guide_legend(byrow = TRUE)) +ylab("")
pB
jpeg(paste(path_pannel,"p5B.jpg",sep=""),  width = 11000/2,  8000/2,res=900)
print(pB)
dev.off()
# Pannel 5 C
data1 = read.delim("data/data1_supp.tab")
data1$clade_group = GTDrift_list_species[data1$species,]$clade_group
data1 = data1[ data1$nb_codon_not_decoded == 0  & data1$pval_aa_fpkm < 0.05 & data1$nb_genes_filtered >= 5000 ,]
pC = ggplot(data1,aes(y=constraint_overused_POCs,x=clade_group,fill=clade_group))  +
geom_hline(size=1,linetype="dashed",col="red",
yintercept = 0 ) +
geom_boxplot(alpha=.1) +
geom_point(aes(fill=clade_group),size=3,pch=21,alpha=0.7) + theme_bw() + theme(
axis.title.x = element_text(color="black",angle = 50, size=25,family="economica"),
axis.title.y = element_text(color="black", size=27, family="economica"),
axis.text.y =  element_text(color="black", size=22, family="economica"),
axis.text.x =  element_text(color="black",vjust=1,hjust=1, size=22,angle = 30, family="economica"),
title =  element_text(color="black", size=15, family="economica"),
legend.text =  element_text(color="black", size=20, family="economica")
) + scale_fill_manual("Clades",values=Clade_color)+
ylab(substitute(paste(Delta," POC"^"cons"))) + xlab("") + theme(legend.position='none')
# ylab("Difference in POC proportion between\nthe 25% highest and the 25% lowest constrained sites") +
pC
# Generate Figure 5
source("figure/figure_main_generator/library_path.R")
# Pannel 5 A
data6 = read.delim("data/data6_supp.tab")
data6$categorie = factor(data6$categorie,levels = rev( unique(data6$categorie)))
dt_graph = data6[data6$species == "Homo_sapiens" & data6$type_aa == "POCs",]
# dt_graph = data6[data6$species == "Drosophila_melanogaster",]
pA = ggplot( dt_graph ,
aes(y=freq,fill=categorie))  +
geom_boxplot(outlier.shape = NA) +
scale_fill_manual(values=set_color[c(4,3,5,6)]) +
scale_shape_manual(values=c(24,22,21,23,25,20))+
xlab("Constrain") + ylab("POC frequency") + theme_bw() + theme(
axis.title.x = element_text(color="black", size=25,family="economica"),
axis.title.y = element_text(color="black", size=25, family="economica"),
axis.text.y =  element_text(color="black", size=20, family="economica"),
axis.text.x =  element_text(color="black", size=0, family="economica"),
title =  element_text(color="black", size=18, family="economica"),
legend.text =  element_text(color="black", size=20, family="economica"),
strip.text = element_text(size=15),
plot.caption = element_text(hjust = 0.42, face= "italic", size=18, family="economica"),
plot.caption.position =  "plot"
) + scale_x_log10() + ggtitle(paste("N = " ,dt_graph$nb_genes[1]," BUSCO genes",sep="")) +
guides(fill = guide_legend(override.aes = list(pch=NA),order = 1),
color = guide_legend(order = 1),
linetype = guide_legend(order = 2),
shape = guide_legend(order = 2),
) + theme(legend.position='none') + xlab("") + coord_cartesian(ylim=c(0.2,0.8))
pA
jpeg(paste(path_pannel,"p5A.jpg",sep=""),  width = 6200/2,  8000/2,res=900)
print(pA)
dev.off()
# Pannel 5 B
dt_graph = data6[data6$species == "Caenorhabditis_elegans" & data6$type_aa == "POCs",]
pB = ggplot( dt_graph ,
aes(y=freq,fill=categorie))  +
# geom_line(data=dt_graph[dt_graph$categorie %in% c("Highly constrained","Unconstrained"),],aes(group=busco_id),alpha=0.2,col="black",linetype="dashed")+
geom_boxplot(outlier.shape = NA) +
scale_fill_manual("Binning of codons per quartile\nof amino-acid constraint",values=set_color[c(4,3,5,6)],labels=c( "Unconstrained" = "25% least constrained" ,
"Slighlty constrained" = "25-50%" ,
"Moderately constrained" = "50-75%"  ,
"Highly constrained" = "25% most constrained")) +
scale_shape_manual(values=c(24,22,21,23,25,20)) +
xlab("Constrain") + ylab("POC frequency") + theme_bw() + theme(
axis.title.x = element_text(color="black", size=25,family="economica"),
axis.title.y = element_text(color="black", size=25, family="economica"),
axis.text.y =  element_text(color="black", size=20, family="economica"),
axis.text.x =  element_text(color="black", size=0, family="economica"),
title =  element_text(color="black", size=18, family="economica"),
legend.text =  element_text(color="black", size=20, family="economica"),
strip.text = element_text(size=15),
plot.caption = element_text(hjust = 0.42, face= "italic", size=18, family="economica"),
plot.caption.position =  "plot"
)  + ggtitle(paste("N = " ,dt_graph$nb_genes[1]," BUSCO genes",sep="")) +
guides(fill = guide_legend(override.aes = list(pch=NA),order = 1),
color = guide_legend(order = 1),
linetype = guide_legend(order = 2),
shape = guide_legend(order = 2),
)+ xlab("") + coord_cartesian(ylim=c(0.2,0.8)) +
theme(legend.spacing.y = unit(.4, 'cm'))   +
guides(fill = guide_legend(byrow = TRUE)) +ylab("")
pB
jpeg(paste(path_pannel,"p5B.jpg",sep=""),  width = 11000/2,  8000/2,res=900)
print(pB)
dev.off()
# Pannel 5 C
data1 = read.delim("data/data1_supp.tab")
data1$clade_group = GTDrift_list_species[data1$species,]$clade_group
data1 = data1[ data1$nb_codon_not_decoded == 0  & data1$pval_aa_fpkm < 0.05 & data1$nb_genes_filtered >= 5000 ,]
pC = ggplot(data1,aes(y=constraint_overused_POCs,x=clade_group,fill=clade_group))  +
geom_hline(size=1,linetype="dashed",col="red",
yintercept = 0 ) +
geom_boxplot(alpha=.1) +
geom_point(aes(fill=clade_group),size=3,pch=21,alpha=0.7) + theme_bw() + theme(
axis.title.x = element_text(color="black",angle = 50, size=25,family="economica"),
axis.title.y = element_text(color="black", size=27, family="economica"),
axis.text.y =  element_text(color="black", size=22, family="economica"),
axis.text.x =  element_text(color="black",vjust=1,hjust=1, size=22,angle = 30, family="economica"),
title =  element_text(color="black", size=15, family="economica"),
legend.text =  element_text(color="black", size=20, family="economica")
) + scale_fill_manual("Clades",values=Clade_color)+
ylab(substitute(paste(Delta," POC"^"cons"))) + xlab("") + theme(legend.position='none')
# ylab("Difference in POC proportion between\nthe 25% highest and the 25% lowest constrained sites") +
pC
jpeg(paste(path_pannel,"p5C.jpg",sep=""), width = 5500/1, height = 3000/1,res=560/1)
print(pC)
dev.off()
# Figure 5
imgA = load.image(paste(path_pannel,"p5A.jpg",sep="") )
imgB = load.image(paste(path_pannel,"p5B.jpg",sep="") )
imgC = load.image(paste(path_pannel,"p5C.jpg",sep="") )
human<-readPNG(paste(path_require,"human.png",sep=""))
Caenorhabditis_elegans<-readPNG(paste(path_require,"Caenorhabditis_elegans.png",sep=""))
{
pdf(file= paste(path_figure,"Figure5.pdf",sep=""), width=5.7, height=5)
m = matrix(rep(NA,100*100), nrow=100)
for(i in 1:50){
m[i,]=c(rep(1,40),rep(2,60))
}
for(i in 50:100){
m[i,]=c(rep(3,100))
}
layout(m)
m
par(mar=c(0, 0, 1, 0))
plot(imgA, axes=FALSE)
mtext("A",at=40,adj=-1, side=2, line=1, font=2, cex=1.3,las=2)
xhuman=710
yhuman=-460
rasterImage(human,xleft=0+xhuman, ybottom=450/.8-yhuman, xright=190/.8+xhuman, ytop=0-yhuman)
par(mar=c(0, 0, 1, 0))
plot(imgB, axes=FALSE)
mtext("B",at=40,adj=-1, side=2, line=1, font=2, cex=1.3,las=2)
xcel=720
ycel=-480
rasterImage(Caenorhabditis_elegans,xleft=0+xcel, ybottom = 350/1.6-ycel, xright = 1000/1.6+xcel, ytop=0-ycel)
par(mar=c(0, 1, 0, 1))
plot(imgC, axes=FALSE)
mtext("C",at=50,adj=-1, side=2, line=1, font=2, cex=1.3,las=2)
dev.off()
}
