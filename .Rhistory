}
}
}
}
print(table(code_table$decoded))
View(code_table)
aa
codon_data$aa_name
options( stringsAsFactors = F, scipen = 999 )
library(stringi)
path = "/home/fbenitiere/data/"
# path = "/beegfs/data/fbenitiere/"
code = read.delim(paste("data/standard_genetic_code.tab",sep=""))
rownames(code) = code$codon
code$nb_syn = table(code$aa_name)[code$aa_name]
code$anticodon = sapply(code$codon,function(x) chartr("TUACG","AATGC",stri_reverse(x))  )
code$nb_syn_scu = table(paste(code$aa_name, substr(code$codon,1,2),sep="_"))[paste(code$aa_name, substr(code$codon,1,2),sep="_")]
code$aa_name_scu = code$aa_name
code[code$nb_syn == 6,]$aa_name_scu =  paste(code[code$nb_syn == 6,]$aa_name ,code[code$nb_syn == 6,]$nb_syn_scu  ,sep="_")
wobble_rule = list("G"=c("C","T"),
"A"=c("C","T","A"),
"T"=c("A","G"),
"C"=c("G"))
list_species = read.delim("data/GTDrift_list_species.tab")
rownames(list_species) = list_species$species
for( species in list_species$species ){
print(species)
genome_assembly = list_species[species,]$assembly_accession
taxID = list_species[species,]$NCBI.taxid
path = paste("data/per_species/",species,"_NCBI.taxid",taxID,"/",genome_assembly,sep="")
code_table = code
if (
file.exists(paste(path,"/tRNA_from_GFF.tab.gz",sep="")) &
file.size(paste(path,"/tRNA_from_GFF.tab.gz",sep="")) != 38 ){
tRNASE_gff = read.delim( paste(path,"/tRNA_from_GFF.tab.gz",sep="") )
tRNASE_gff$codon = sapply(tRNASE_gff$anticodon,function(x) chartr("TUACG","AATGC",stri_reverse(x))  )
tRNASE_gff_table = table(tRNASE_gff$codon)
tRNASE_copies_table = tRNASE_gff_table
tRNA_GFF = T
} else if (
file.exists(paste(path,"/tRNAscan_SE.tab.gz",sep="")) &
file.size(paste(path,"/tRNAscan_SE.tab.gz",sep="")) != 36  ){
tRNASE_copies = read.delim(paste(path,"/tRNAscan_SE.tab.gz",sep=""), header = T)
tRNASE_copies = tRNASE_copies[as.numeric(tRNASE_copies$Score) > 55,]
tRNASE_copies = tRNASE_copies[tRNASE_copies$Note != "pseudo" | is.na(tRNASE_copies$Note),]
tRNASE_copies$anticodon = sapply(tRNASE_copies$Codon,function(x) chartr("TUACG","TTACG",x)  )
tRNASE_copies$codon = sapply(tRNASE_copies$Codon,function(x) chartr("TUACG","AATGC",stri_reverse(x)) )
tRNASE_copies_table = table(tRNASE_copies$codon)
tRNA_GFF = F
}
code_table$nb_tRNA_copies = tRNASE_copies_table[code_table$codon]
code_table[is.na(code_table$nb_tRNA_copies),]$nb_tRNA_copies = 0
code_table$decoded = F
code_table$POC1 = F
code_table$POC2 = F
for (aa in unique(code_table$aa_name)){
if (length(code_table[code_table$aa_name == aa & code_table$nb_tRNA_copies != 0,]$nb_tRNA_copies) != 0){
tRNA_present = code_table[code_table$aa_name == aa & code_table$nb_tRNA_copies != 0,]$nb_tRNA_copies
names(tRNA_present) = code_table[code_table$aa_name == aa & code_table$nb_tRNA_copies != 0,]$anticodon
decoded_codon = unique(unlist(sapply(names(tRNA_present),function(x) paste(chartr( "TUACG" , "AATGC" , stri_reverse(substr(x,2,3))),unlist(wobble_rule[substr(x,1,1)]),sep=""))))
code_table[code_table$codon %in% decoded_codon,]$decoded = T
if ( all(codon_data[codon_data$aa_name == aa ,]$decoded)){
if ( !aa %in% c("Ter","Met","Trp")){
if (length(tRNA_present) > 1 & any(tRNA_present != max(tRNA_present))){
abundant = names(tRNA_present[ tRNA_present == max(tRNA_present)])
code_table[code_table$anticodon %in% abundant,]$POC1 = T
decoded_codon = unique(unlist(sapply(abundant,function(x) paste(chartr( "TUACG" , "AATGC" , stri_reverse(substr(x,2,3))),unlist(wobble_rule[substr(x,1,1)]),sep=""))))
if (any(code_table$codon %in% decoded_codon & code_table$nb_tRNA_copies == 0)){
code_table[code_table$codon %in% decoded_codon & code_table$nb_tRNA_copies == 0,]$POC1 = T}
} else if (length(tRNA_present) == 1){
abundant = names(tRNA_present[ tRNA_present == max(tRNA_present)])
code_table[code_table$anticodon %in% abundant,]$POC2 = T
}
}
}
}}
print(table(code_table$decoded))
code_table$nb_tRNA_copies = sapply(code_table$codon,function(codon) sum(tRNASE_copies_table[codon],na.rm = T))
code_table$nb_tRNA_copies_aa = sapply(code_table$aa_name,function(aa) sum(code_table[code_table$aa_name == aa,]$nb_tRNA_copies,na.rm = T))
code_table$RTF = code_table$nb_tRNA_copies / (code_table$nb_tRNA_copies_aa / code_table$nb_syn)
write.table(code_table,paste(path,"/decoding_table.tab",sep=""),sep="\t",quote=F,row.names=F)
bash_command <- paste("gzip -f ",path,"/decoding_table.tab",sep="")
system(bash_command)
}
# Generate Data 1
library(stringi)
path_data = "/home/fbenitiere/data/"
# busco_tab = read.delim("/home/fbenitiere/data/Projet-SplicedVariants/DnDs/Metazoa_clades_v2/gene_No_aas_cds")
# rownames(busco_tab) = busco_tab$species
data_conservation = read.delim(paste("data/compilation_prop_gap_pergene_25_50_75.tab.gz",sep=""))
data_conservation_rmfirst1000bp = read.delim(paste("data/compilation_prop_gap_pergene_25_50_75_rmfirst1000bp.tab.gz",sep=""))
stderror <- function(x) sd(x , na.rm = T)/sqrt(length(x[!is.na(x)] ))
code = read.delim(paste("data/standard_genetic_code.tab",sep=""))
rownames(code) = code$codon
stop_codon = rownames(code[code$aa_name == "Ter",])
wobble_pairing = c("C"="IC","T"="GU","G"="UG","A"="IA")
wobble_associat_wc = list("T"="C",
"A"="A",
"G"="A",
"C"="T")
GTDrift_list_species = read.delim("data/GTDrift_list_species.tab")
rownames(GTDrift_list_species) = GTDrift_list_species$species
data1 = data.frame()
data_codons = data.frame()
for (species in GTDrift_list_species$species){
dt_species = data.frame()
print(species)
genome_assembly = GTDrift_list_species[species,]$assembly_accession
taxID = GTDrift_list_species[species,]$NCBI.taxid
path = paste("data/per_species/",species,"_NCBI.taxid",taxID,"/",genome_assembly,sep="")
if (
file.exists(paste(path,"/tRNA_from_GFF.tab.gz",sep="")) &
file.size(paste(path,"/tRNA_from_GFF.tab.gz",sep="")) != 38 ){ # if non empty
tRNA_GFF = T
} else if (
file.exists(paste(path,"/tRNAscan_SE.tab.gz",sep="")) &
file.size(paste(path,"/tRNAscan_SE.tab.gz",sep="")) != 36  ){ # if non empty
tRNA_GFF = F
}
codon_usage = read.delim( paste(path,"/codon_usage_gene_fpkm.tab.gz",sep="") )
nb_genes = length(unique(codon_usage$gene_id))
codon_usage$length = rowSums(codon_usage[ , 3:66]) * 3
codon_usage$intern_stop_codon = rowSums(codon_usage[,stop_codon]) - grepl(paste(stop_codon,collapse = "|"),codon_usage$end_codon)
codon_usage = codon_usage[codon_usage$intern_stop_codon == 0 & codon_usage$start_codon == "ATG" & codon_usage$length_cds %% 3 == 0,]
if (quantile(grepl(paste(stop_codon,collapse = "|"),codon_usage$end_codon),0.75) != 0){  # if annotated seq have a stop codon for the majority then remove those that dont
codon_usage = codon_usage[grepl(paste(stop_codon,collapse = "|"),codon_usage$end_codon),] } else { print(species)}
codon_usage = codon_usage[order(codon_usage$length_cds,decreasing = T),]
codon_usage = codon_usage[!duplicated(codon_usage$gene_id),]
codon_usage = codon_usage[!is.na(codon_usage$median_fpkm) ,]
prop_cds_expressed = nrow(codon_usage[codon_usage$median_fpkm != 0 ,]) / nrow(codon_usage)
codon_usage = codon_usage[codon_usage$median_fpkm != 0 ,]
observation = colSums( codon_usage[3:70] * codon_usage$median_fpkm , na.rm = T )
tRNA_optimal = read.delim(paste(path,"/decoding_table.tab.gz",sep=""))
rownames(tRNA_optimal) = tRNA_optimal$codon
tRNA_optimal = tRNA_optimal[tRNA_optimal$aa_name != "Ter",]
nb_codon_not_decoded = sum(!tRNA_optimal$decoded)
aa_data = data.frame()
for (amino_acid in unique(code$aa_name)){
codon_used = rownames(code[code$aa_name == amino_acid,])
aa_data = rbind(aa_data,
data.frame(
amino_acid ,
letter_aa = unique(code[code$aa_name == amino_acid,]$aa) ,
tRNASE_copies= sum(tRNA_optimal[codon_used,]$nb_tRNA_copies,na.rm = T),
obs_codon = sum(observation[codon_used])
))
}
aa_data = aa_data[!grepl("Ter",aa_data$amino_acid) ,]
spearman_method_aa = cor.test( aa_data$tRNASE_copies, aa_data$obs_codon,method="spearman",exact=F)
## Selectionner les tRNA + abondant pour les duet XXA-XXG
abond_AG = tRNA_optimal[!tRNA_optimal$aa_name %in% c("Met","Trp","Ile"),]
abond_AG = abond_AG[substr(abond_AG$codon,3,3) %in% c("A","G"),]
abond_AG = abond_AG[order(abond_AG$nb_tRNA_copies,decreasing = T),]
# abond_AG = abond_AG[ !abond_AG$aa_name_scu %in% abond_AG[abond_AG$nb_tRNA_copies == 0,]$aa_name_scu,]
abond_AG = abond_AG[ abond_AG$aa_name_scu %in% c("Lys","Glu","Leu_4" ,"Gln","Val","Thr","Pro","Leu_2" ,"Ser_4", "Arg_2", "Ala" ),]
vector = (tapply(abond_AG$nb_tRNA_copies , abond_AG$aa_name_scu,function(x) sum(x == max(x))))
abond_AG = abond_AG[abond_AG$aa_name_scu %in% names(vector[vector != 2]),]
abond_AG = abond_AG[!duplicated(paste(abond_AG$aa_name_scu)),]$codon
print(length(abond_AG))
GCi_obs = rowSums(codon_usage[c("Ci","Gi")],na.rm = T)
ATGCi_obs = rowSums(codon_usage[c("Ai","Ti","Ci","Gi")],na.rm = T)
GC3_obs = rowSums(codon_usage[c("C3","G3")],na.rm = T)
ATGC3_obs = rowSums(codon_usage[c("A3","T3","C3","G3")],na.rm = T)
gc3 = (GC3_obs / ATGC3_obs)
gci = (GCi_obs / ATGCi_obs)
model_lm = lm( gc3 ~  gci)
spearman_method_gc3gci = cor.test( gc3, gci,method = "spearman",exact=F)
xaxis = codon_usage$median_fpkm
proportion = 2/100
quantile = unique( quantile(xaxis, probs = seq(0, 1,proportion),na.rm=T ))
intervalle_FPKM = cut(xaxis, quantile,include.lowest = T,include.higher=T)
# print(mean(table(intervalle_FPKM)))
FPKM_bins = tapply(xaxis, intervalle_FPKM, median)
## Translational selection signal
data_optiplus = data.frame()
for ( amino_acid in unique(tRNA_optimal[ tRNA_optimal$nb_syn >= 2,]$aa_name)){
codon_used = rownames(tRNA_optimal[tRNA_optimal$aa_name == amino_acid,])
amino_acid_count = rowSums(codon_usage[codon_used],na.rm = T)
triplet_intronic = rowSums(codon_usage[paste(codon_used,'_intronic',sep = "")],na.rm = T)
for ( codon in codon_used ){
COA_obs =  unlist(codon_usage[codon])
COA_neg_obs = amino_acid_count
COA_obs_intronic =  unlist(codon_usage[paste(codon,'_intronic',sep = "")])
COA_neg_obs_intronic = triplet_intronic
data_optiplus = rbind(data_optiplus,data.frame(
species,
amino_acid,
codon,
aa_name_scu = tRNA_optimal[codon,]$aa_name_scu,
expressed_overused_background = (round(tapply( COA_obs / COA_neg_obs , intervalle_FPKM , function(x) mean(x,na.rm=T))[length(FPKM_bins)],5) -
round( mean( (COA_obs / COA_neg_obs)[codon_usage$median_fpkm <= median(codon_usage$median_fpkm )] , na.rm=T) , 5)) - (
round(tapply( COA_obs_intronic / COA_neg_obs_intronic   , intervalle_FPKM , function(x) mean(x,na.rm=T))[length(FPKM_bins)],5) -
round( mean( (COA_obs_intronic / COA_neg_obs_intronic)[codon_usage$median_fpkm <= median(codon_usage$median_fpkm )] , na.rm=T),5)
)
))
}
}
data_optiplus = data_optiplus[order(data_optiplus$expressed_overused_background,decreasing = T),]
data_optiplus = data_optiplus[order(data_optiplus$amino_acid,decreasing = F),]
data_optiplus$rank = unlist(tapply(data_optiplus$expressed_overused_background,data_optiplus$amino_acid , function(x) rev(rank(x))))
## Faire mieux
data_optiplus$nb_tRNA_copies = tRNA_optimal[data_optiplus$codon,]$nb_tRNA_copies
data_codons = rbind(data_codons,data_optiplus)
DUC_IC = data_optiplus[substr(data_optiplus$codon,3,3) %in% c("C","T"),]
DUC_IC = DUC_IC[ DUC_IC$aa_name_scu %in% DUC_IC[DUC_IC$nb_tRNA_copies == 0,]$aa_name_scu,]
DUC_IC = DUC_IC[!duplicated(DUC_IC$aa_name_scu),]$codon
table(substr(DUC_IC,3,3))
dt_species = rbind(dt_species,data.frame(
species,
tRNA_GFF,
prop_cds_expressed,
nb_genes,
nb_genes_filtered = nrow(codon_usage),
nb_codon_not_decoded,
rho_aa_fpkm = spearman_method_aa$estimate,
pval_aa_fpkm = spearman_method_aa$p.value,
rho_gc3_gci = spearman_method_gc3gci$estimate,
pval_gc3_gci = spearman_method_gc3gci$p.value,
g_abond_ag = sum(substr(abond_AG,3,3) %in% c("G")) / length(abond_AG),
c_duc_ic = sum(substr(DUC_IC,3,3) %in% c("C")) / length(DUC_IC),
gc3 = mean(GC3_obs / ATGC3_obs,na.rm=T),
var_gc3 = var(GC3_obs / ATGC3_obs,na.rm=T),
gci = mean(GCi_obs / ATGCi_obs,na.rm=T),
std_gci = stderror(GCi_obs / ATGCi_obs),
var_gci = var(GCi_obs / ATGCi_obs,na.rm=T)
) )
### Translational selection intensity
for ( type_aa in c( "POC1","POC2","POCs")){
if (type_aa == "POC1" ){
subset_selected = tRNA_optimal[tRNA_optimal$POC1,]
list_POC = subset_selected$codon
list_aa = unique(subset_selected$aa_name)
list_codon = tRNA_optimal[tRNA_optimal$aa_name %in% list_aa,]$codon
} else if  (type_aa == "POC2" ){
subset_selected = tRNA_optimal[tRNA_optimal$POC2,]
list_POC = subset_selected$codon
list_aa = unique(subset_selected$aa_name)
list_codon = tRNA_optimal[tRNA_optimal$aa_name %in% list_aa,]$codon
} else if  (type_aa == "POCs" ){
subset_selected = tRNA_optimal[tRNA_optimal$POC2 | tRNA_optimal$POC1,]
list_POC = subset_selected$codon
list_aa = unique(subset_selected$aa_name)
list_codon = tRNA_optimal[tRNA_optimal$aa_name %in% list_aa,]$codon
}
if ( length(list_POC) != 0 ){
##### Over-used of POC in expressed genes
POC_obs = rowSums(codon_usage[ list_POC ],na.rm = T)
POC_codons_obs = rowSums(codon_usage[ list_codon ],na.rm = T)
POC_obs_intronic = rowSums(codon_usage[paste(list_POC,'_intronic',sep = "")],na.rm = T)
POC_codons_obs_intronic = rowSums(codon_usage[paste(list_codon,'_intronic',sep = "")],na.rm = T)
## Over-used of POC in constraint sites
if (GTDrift_list_species[species,]$clade_group %in% c("Mammalia","Aves","Other Tetrapods")){
data_conservation_sub = data_conservation_rmfirst1000bp[data_conservation_rmfirst1000bp$species == species & data_conservation_rmfirst1000bp$protein %in% codon_usage$protein_id,]
} else {
data_conservation_sub = data_conservation[data_conservation$species == species ,]
}
table_constrain = data.frame(busco_id = data_conservation_sub$busco_id)
for (constrain in c("_highconst","_modconst","_sligconst","_unconst")){
table_constrain[,paste("POC",constrain,sep="")] = rowSums(data_conservation_sub[paste(list_POC,constrain,sep = "")],na.rm = T)
table_constrain[,paste("POC_codon",constrain,sep="")] = rowSums(data_conservation_sub[paste(list_codon,constrain,sep = "")],na.rm = T)
}
Fpoc_expressed = round(tapply( POC_obs / POC_codons_obs , intervalle_FPKM , function(x) mean(x,na.rm=T))[length(FPKM_bins)],5)
Fpoc_noexpressed = round( mean( (POC_obs / POC_codons_obs)[codon_usage$median_fpkm <= median(codon_usage$median_fpkm )] , na.rm=T) , 5)
dt_translational_selection = data.frame(
nb_aa = length(list_aa),
nb_genes_per_bins = mean(table(intervalle_FPKM)),
nb_busco = nrow(table_constrain),
S = log(Fpoc_expressed/(1-Fpoc_expressed)) - log(Fpoc_noexpressed/(1-Fpoc_noexpressed)),
expressed_overused = 100 * (Fpoc_expressed - Fpoc_noexpressed) ,
expressed_overused_background = 100*((Fpoc_expressed - Fpoc_noexpressed) - (
round(tapply( POC_obs_intronic / POC_codons_obs_intronic   , intervalle_FPKM , function(x) mean(x,na.rm=T))[length(FPKM_bins)],5) -
round( mean( (POC_obs_intronic / POC_codons_obs_intronic)[codon_usage$median_fpkm <= median(codon_usage$median_fpkm )] , na.rm=T),5)
)),
# constraint_overused = 100*(mean(table_constrain$POC_highconst/table_constrain$POC_codon_highconst ,na.rm = T) - mean(table_constrain$POC_unconst/table_constrain$POC_codon_unconst,na.rm = T))
constraint_overused = 100 * mean(table_constrain$POC_highconst/table_constrain$POC_codon_highconst - table_constrain$POC_unconst/table_constrain$POC_codon_unconst,na.rm = T)
)
} else {
dt_translational_selection = data.frame(
nb_aa = 0,
nb_genes_per_bins = NA,
nb_busco = NA,
S = NA,
expressed_overused = NA,
expressed_overused_background = NA,
constraint_overused = NA
)
}
colnames(dt_translational_selection) = paste(colnames(dt_translational_selection),type_aa,sep="_")
dt_species = cbind(dt_species,dt_translational_selection)
}
data1 = rbind(data1,dt_species)
}
dt=data1
data1 = read.delim("data/data1_supp.tab")
# Generate Data 1
library(stringi)
path_data = "/home/fbenitiere/data/"
# busco_tab = read.delim("/home/fbenitiere/data/Projet-SplicedVariants/DnDs/Metazoa_clades_v2/gene_No_aas_cds")
# rownames(busco_tab) = busco_tab$species
data_conservation = read.delim(paste("data/compilation_prop_gap_pergene_25_50_75.tab.gz",sep=""))
data_conservation_rmfirst1000bp = read.delim(paste("data/compilation_prop_gap_pergene_25_50_75_rmfirst1000bp.tab.gz",sep=""))
stderror <- function(x) sd(x , na.rm = T)/sqrt(length(x[!is.na(x)] ))
code = read.delim(paste("data/standard_genetic_code.tab",sep=""))
rownames(code) = code$codon
stop_codon = rownames(code[code$aa_name == "Ter",])
wobble_pairing = c("C"="IC","T"="GU","G"="UG","A"="IA")
wobble_associat_wc = list("T"="C",
"A"="A",
"G"="A",
"C"="T")
GTDrift_list_species = read.delim("data/GTDrift_list_species.tab")
rownames(GTDrift_list_species) = GTDrift_list_species$species
data1 = data.frame()
data_codons = data.frame()
for (species in GTDrift_list_species$species){
dt_species = data.frame()
print(species)
genome_assembly = GTDrift_list_species[species,]$assembly_accession
taxID = GTDrift_list_species[species,]$NCBI.taxid
path = paste("data/per_species/",species,"_NCBI.taxid",taxID,"/",genome_assembly,sep="")
if (
file.exists(paste(path,"/tRNA_from_GFF.tab.gz",sep="")) &
file.size(paste(path,"/tRNA_from_GFF.tab.gz",sep="")) != 38 ){ # if non empty
tRNA_GFF = T
} else if (
file.exists(paste(path,"/tRNAscan_SE.tab.gz",sep="")) &
file.size(paste(path,"/tRNAscan_SE.tab.gz",sep="")) != 36  ){ # if non empty
tRNA_GFF = F
}
codon_usage = read.delim( paste(path,"/codon_usage_gene_fpkm.tab.gz",sep="") )
nb_genes = length(unique(codon_usage$gene_id))
codon_usage$length = rowSums(codon_usage[ , 3:66]) * 3
codon_usage$intern_stop_codon = rowSums(codon_usage[,stop_codon]) - grepl(paste(stop_codon,collapse = "|"),codon_usage$end_codon)
codon_usage = codon_usage[codon_usage$intern_stop_codon == 0 & codon_usage$start_codon == "ATG" & codon_usage$length_cds %% 3 == 0,]
if (quantile(grepl(paste(stop_codon,collapse = "|"),codon_usage$end_codon),0.75) != 0){  # if annotated seq have a stop codon for the majority then remove those that dont
codon_usage = codon_usage[grepl(paste(stop_codon,collapse = "|"),codon_usage$end_codon),] } else { print(species)}
codon_usage = codon_usage[order(codon_usage$length_cds,decreasing = T),]
codon_usage = codon_usage[!duplicated(codon_usage$gene_id),]
codon_usage = codon_usage[!is.na(codon_usage$median_fpkm) ,]
prop_cds_expressed = nrow(codon_usage[codon_usage$median_fpkm != 0 ,]) / nrow(codon_usage)
codon_usage = codon_usage[codon_usage$median_fpkm != 0 ,]
observation = colSums( codon_usage[3:70] * codon_usage$median_fpkm , na.rm = T )
tRNA_optimal = read.delim(paste(path,"/decoding_table.tab.gz",sep=""))
rownames(tRNA_optimal) = tRNA_optimal$codon
tRNA_optimal = tRNA_optimal[tRNA_optimal$aa_name != "Ter",]
nb_codon_not_decoded = sum(!tRNA_optimal$decoded)
aa_data = data.frame()
for (amino_acid in unique(code$aa_name)){
codon_used = rownames(code[code$aa_name == amino_acid,])
aa_data = rbind(aa_data,
data.frame(
amino_acid ,
letter_aa = unique(code[code$aa_name == amino_acid,]$aa) ,
tRNASE_copies= sum(tRNA_optimal[codon_used,]$nb_tRNA_copies,na.rm = T),
obs_codon = sum(observation[codon_used])
))
}
aa_data = aa_data[!grepl("Ter",aa_data$amino_acid) ,]
spearman_method_aa = cor.test( aa_data$tRNASE_copies, aa_data$obs_codon,method="spearman",exact=F)
## Selectionner les tRNA + abondant pour les duet XXA-XXG
abond_AG = tRNA_optimal[!tRNA_optimal$aa_name %in% c("Met","Trp","Ile"),]
abond_AG = abond_AG[substr(abond_AG$codon,3,3) %in% c("A","G"),]
abond_AG = abond_AG[order(abond_AG$nb_tRNA_copies,decreasing = T),]
# abond_AG = abond_AG[ !abond_AG$aa_name_scu %in% abond_AG[abond_AG$nb_tRNA_copies == 0,]$aa_name_scu,]
abond_AG = abond_AG[ abond_AG$aa_name_scu %in% c("Lys","Glu","Leu_4" ,"Gln","Val","Thr","Pro","Leu_2" ,"Ser_4", "Arg_2", "Ala" ),]
vector = (tapply(abond_AG$nb_tRNA_copies , abond_AG$aa_name_scu,function(x) sum(x == max(x))))
abond_AG = abond_AG[abond_AG$aa_name_scu %in% names(vector[vector != 2]),]
abond_AG = abond_AG[!duplicated(paste(abond_AG$aa_name_scu)),]$codon
print(length(abond_AG))
GCi_obs = rowSums(codon_usage[c("Ci","Gi")],na.rm = T)
ATGCi_obs = rowSums(codon_usage[c("Ai","Ti","Ci","Gi")],na.rm = T)
GC3_obs = rowSums(codon_usage[c("C3","G3")],na.rm = T)
ATGC3_obs = rowSums(codon_usage[c("A3","T3","C3","G3")],na.rm = T)
gc3 = (GC3_obs / ATGC3_obs)
gci = (GCi_obs / ATGCi_obs)
model_lm = lm( gc3 ~  gci)
spearman_method_gc3gci = cor.test( gc3, gci,method = "spearman",exact=F)
xaxis = codon_usage$median_fpkm
proportion = 2/100
quantile = unique( quantile(xaxis, probs = seq(0, 1,proportion),na.rm=T ))
intervalle_FPKM = cut(xaxis, quantile,include.lowest = T,include.higher=T)
# print(mean(table(intervalle_FPKM)))
FPKM_bins = tapply(xaxis, intervalle_FPKM, median)
## Translational selection signal
data_optiplus = data.frame()
for ( amino_acid in unique(tRNA_optimal[ tRNA_optimal$nb_syn >= 2,]$aa_name)){
codon_used = rownames(tRNA_optimal[tRNA_optimal$aa_name == amino_acid,])
amino_acid_count = rowSums(codon_usage[codon_used],na.rm = T)
triplet_intronic = rowSums(codon_usage[paste(codon_used,'_intronic',sep = "")],na.rm = T)
for ( codon in codon_used ){
COA_obs =  unlist(codon_usage[codon])
COA_neg_obs = amino_acid_count
COA_obs_intronic =  unlist(codon_usage[paste(codon,'_intronic',sep = "")])
COA_neg_obs_intronic = triplet_intronic
data_optiplus = rbind(data_optiplus,data.frame(
species,
amino_acid,
codon,
aa_name_scu = tRNA_optimal[codon,]$aa_name_scu,
expressed_overused_background = (round(tapply( COA_obs / COA_neg_obs , intervalle_FPKM , function(x) mean(x,na.rm=T))[length(FPKM_bins)],5) -
round( mean( (COA_obs / COA_neg_obs)[codon_usage$median_fpkm <= median(codon_usage$median_fpkm )] , na.rm=T) , 5)) - (
round(tapply( COA_obs_intronic / COA_neg_obs_intronic   , intervalle_FPKM , function(x) mean(x,na.rm=T))[length(FPKM_bins)],5) -
round( mean( (COA_obs_intronic / COA_neg_obs_intronic)[codon_usage$median_fpkm <= median(codon_usage$median_fpkm )] , na.rm=T),5)
)
))
}
}
data_optiplus = data_optiplus[order(data_optiplus$expressed_overused_background,decreasing = T),]
data_optiplus = data_optiplus[order(data_optiplus$amino_acid,decreasing = F),]
data_optiplus$rank = unlist(tapply(data_optiplus$expressed_overused_background,data_optiplus$amino_acid , function(x) rev(rank(x))))
## Faire mieux
data_optiplus$nb_tRNA_copies = tRNA_optimal[data_optiplus$codon,]$nb_tRNA_copies
data_codons = rbind(data_codons,data_optiplus)
DUC_IC = data_optiplus[substr(data_optiplus$codon,3,3) %in% c("C","T"),]
DUC_IC = DUC_IC[ DUC_IC$aa_name_scu %in% DUC_IC[DUC_IC$nb_tRNA_copies == 0,]$aa_name_scu,]
DUC_IC = DUC_IC[!duplicated(DUC_IC$aa_name_scu),]$codon
table(substr(DUC_IC,3,3))
dt_species = rbind(dt_species,data.frame(
species,
tRNA_GFF,
prop_cds_expressed,
nb_genes,
nb_genes_filtered = nrow(codon_usage),
nb_codon_not_decoded,
rho_aa_fpkm = spearman_method_aa$estimate,
pval_aa_fpkm = spearman_method_aa$p.value,
rho_gc3_gci = spearman_method_gc3gci$estimate,
pval_gc3_gci = spearman_method_gc3gci$p.value,
g_abond_ag = sum(substr(abond_AG,3,3) %in% c("G")) / length(abond_AG),
c_duc_ic = sum(substr(DUC_IC,3,3) %in% c("C")) / length(DUC_IC),
gc3 = mean(GC3_obs / ATGC3_obs,na.rm=T),
var_gc3 = var(GC3_obs / ATGC3_obs,na.rm=T),
gci = mean(GCi_obs / ATGCi_obs,na.rm=T),
std_gci = stderror(GCi_obs / ATGCi_obs),
var_gci = var(GCi_obs / ATGCi_obs,na.rm=T)
) )
### Translational selection intensity
for ( type_aa in c( "POC1","POC2","POCs")){
if (type_aa == "POC1" ){
subset_selected = tRNA_optimal[tRNA_optimal$POC1,]
list_POC = subset_selected$codon
list_aa = unique(subset_selected$aa_name)
list_codon = tRNA_optimal[tRNA_optimal$aa_name %in% list_aa,]$codon
} else if  (type_aa == "POC2" ){
subset_selected = tRNA_optimal[tRNA_optimal$POC2,]
list_POC = subset_selected$codon
list_aa = unique(subset_selected$aa_name)
list_codon = tRNA_optimal[tRNA_optimal$aa_name %in% list_aa,]$codon
} else if  (type_aa == "POCs" ){
subset_selected = tRNA_optimal[tRNA_optimal$POC2 | tRNA_optimal$POC1,]
list_POC = subset_selected$codon
list_aa = unique(subset_selected$aa_name)
list_codon = tRNA_optimal[tRNA_optimal$aa_name %in% list_aa,]$codon
}
if ( length(list_POC) != 0 ){
##### Over-used of POC in expressed genes
POC_obs = rowSums(codon_usage[ list_POC ],na.rm = T)
POC_codons_obs = rowSums(codon_usage[ list_codon ],na.rm = T)
POC_obs_intronic = rowSums(codon_usage[paste(list_POC,'_intronic',sep = "")],na.rm = T)
POC_codons_obs_intronic = rowSums(codon_usage[paste(list_codon,'_intronic',sep = "")],na.rm = T)
## Over-used of POC in constraint sites
if (GTDrift_list_species[species,]$clade_group %in% c("Mammalia","Aves","Other Tetrapods")){
data_conservation_sub = data_conservation_rmfirst1000bp[data_conservation_rmfirst1000bp$species == species & data_conservation_rmfirst1000bp$protein %in% codon_usage$protein_id,]
} else {
data_conservation_sub = data_conservation[data_conservation$species == species ,]
}
table_constrain = data.frame(busco_id = data_conservation_sub$busco_id)
for (constrain in c("_highconst","_modconst","_sligconst","_unconst")){
table_constrain[,paste("POC",constrain,sep="")] = rowSums(data_conservation_sub[paste(list_POC,constrain,sep = "")],na.rm = T)
table_constrain[,paste("POC_codon",constrain,sep="")] = rowSums(data_conservation_sub[paste(list_codon,constrain,sep = "")],na.rm = T)
}
Fpoc_expressed = round(tapply( POC_obs / POC_codons_obs , intervalle_FPKM , function(x) mean(x,na.rm=T))[length(FPKM_bins)],5)
Fpoc_noexpressed = round( mean( (POC_obs / POC_codons_obs)[codon_usage$median_fpkm <= median(codon_usage$median_fpkm )] , na.rm=T) , 5)
dt_translational_selection = data.frame(
nb_aa = length(list_aa),
nb_genes_per_bins = mean(table(intervalle_FPKM)),
nb_busco = nrow(table_constrain),
S = log(Fpoc_expressed/(1-Fpoc_expressed)) - log(Fpoc_noexpressed/(1-Fpoc_noexpressed)),
expressed_overused = 100 * (Fpoc_expressed - Fpoc_noexpressed) ,
expressed_overused_background = 100*((Fpoc_expressed - Fpoc_noexpressed) - (
round(tapply( POC_obs_intronic / POC_codons_obs_intronic   , intervalle_FPKM , function(x) mean(x,na.rm=T))[length(FPKM_bins)],5) -
round( mean( (POC_obs_intronic / POC_codons_obs_intronic)[codon_usage$median_fpkm <= median(codon_usage$median_fpkm )] , na.rm=T),5)
)),
# constraint_overused = 100*(mean(table_constrain$POC_highconst/table_constrain$POC_codon_highconst ,na.rm = T) - mean(table_constrain$POC_unconst/table_constrain$POC_codon_unconst,na.rm = T))
constraint_overused = 100 * mean(table_constrain$POC_highconst/table_constrain$POC_codon_highconst - table_constrain$POC_unconst/table_constrain$POC_codon_unconst,na.rm = T)
)
} else {
dt_translational_selection = data.frame(
nb_aa = 0,
nb_genes_per_bins = NA,
nb_busco = NA,
S = NA,
expressed_overused = NA,
expressed_overused_background = NA,
constraint_overused = NA
)
}
colnames(dt_translational_selection) = paste(colnames(dt_translational_selection),type_aa,sep="_")
dt_species = cbind(dt_species,dt_translational_selection)
}
data1 = rbind(data1,dt_species)
}
dt=data1
colnames(dt)
for (i in colnames(dt)){
dt[,i]
}
dt[,i] == data1[,i]
print(table(dt[,i] == data1[,i]))
for (i in colnames(dt)){
print(table(dt[,i] == data1[,i]))
}
