species = "Ficedula_albicollis"
print(species)
pathspecies = paste(path,"Projet-SplicedVariants/Annotations/",species,"/",sep="")
code_table = code
if (
file.exists(paste(pathspecies,"formatted_data/tRNAscan.tab",sep="")) &
file.size(paste(pathspecies,"formatted_data/tRNAscan.tab",sep="")) != 0 ){
tRNASE_gff = read.delim( paste(pathspecies,"/formatted_data/tRNAscan.tab",sep="") )
tRNASE_gff$codon = sapply(tRNASE_gff$anticodon,function(x) chartr("TUACG","AATGC",stri_reverse(x))  )
tRNASE_gff_table = table(tRNASE_gff$codon)
tRNASE_copies_table = tRNASE_gff_table
tRNA_GFF = T
} else if (
file.exists(paste(pathspecies,"formatted_data/tRNAscan_SE.tab",sep="")) &
file.size(paste(pathspecies,"formatted_data/tRNAscan_SE.tab",sep="")) != 0 ){
tRNASE_copies = read.delim(paste(pathspecies,"formatted_data/tRNAscan_SE.tab",sep=""), header = T)
tRNASE_copies = tRNASE_copies[as.numeric(tRNASE_copies$Score) > 55,]
tRNASE_copies = tRNASE_copies[tRNASE_copies$Note != "pseudo" | is.na(tRNASE_copies$Note),]
tRNASE_copies$anticodon = sapply(tRNASE_copies$Codon,function(x) chartr("TUACG","TTACG",x)  )
tRNASE_copies$codon = sapply(tRNASE_copies$Codon,function(x) chartr("TUACG","AATGC",stri_reverse(x)) )
tRNASE_copies_table = table(tRNASE_copies$codon)
tRNA_GFF = F
}
code_table$nb_tRNA_copies = tRNASE_copies_table[code_table$codon]
code_table[is.na(code_table$nb_tRNA_copies),]$nb_tRNA_copies = 0
code_table$decoded = F
code_table$POC1 = F
code_table$POC2 = F
code_table
setwd("~/2024-translational_selection")
options( stringsAsFactors = F, scipen = 999 )
library(stringi)
path = "/home/fbenitiere/data/"
# path = "/beegfs/data/fbenitiere/"
code = read.delim(paste("data/standard_genetic_code.tab",sep=""))
rownames(code) = code$codon
code$nb_syn = table(code$aa_name)[code$aa_name]
code$anticodon = sapply(code$codon,function(x) chartr("TUACG","AATGC",stri_reverse(x))  )
code$nb_syn_scu = table(paste(code$aa_name, substr(code$codon,1,2),sep="_"))[paste(code$aa_name, substr(code$codon,1,2),sep="_")]
code$aa_name_scu = code$aa_name
code[code$nb_syn == 6,]$aa_name_scu =  paste(code[code$nb_syn == 6,]$aa_name ,code[code$nb_syn == 6,]$nb_syn_scu  ,sep="_")
wobble_rule = list("G"=c("C","T"),
"A"=c("C","T","A"),
"T"=c("A","G"),
"C"=c("G"))
list_species = read.delim("data/GTDrift_list_species.tab")
rownames(list_species) = list_species$species
for( species in list_species$species ){
print(species)
genome_assembly = list_species[species,]$assembly_accession
taxID = list_species[species,]$NCBI.taxid
path = paste("data/per_species/",species,"_NCBI.taxid",taxID,"/",genome_assembly,sep="")
code_table = code
if (
file.exists(paste(path,"/tRNA_from_GFF.tab.gz",sep="")) &
file.size(paste(path,"/tRNA_from_GFF.tab.gz",sep="")) != 38 ){
tRNASE_gff = read.delim( paste(path,"/tRNA_from_GFF.tab.gz",sep="") )
tRNASE_gff$codon = sapply(tRNASE_gff$anticodon,function(x) chartr("TUACG","AATGC",stri_reverse(x))  )
tRNASE_gff_table = table(tRNASE_gff$codon)
tRNASE_copies_table = tRNASE_gff_table
tRNA_GFF = T
} else if (
file.exists(paste(path,"/tRNAscan_SE.tab.gz",sep="")) &
file.size(paste(path,"/tRNAscan_SE.tab.gz",sep="")) != 36  ){
tRNASE_copies = read.delim(paste(path,"/tRNAscan_SE.tab.gz",sep=""), header = T)
tRNASE_copies = tRNASE_copies[as.numeric(tRNASE_copies$Score) > 55,]
tRNASE_copies = tRNASE_copies[tRNASE_copies$Note != "pseudo" | is.na(tRNASE_copies$Note),]
tRNASE_copies$anticodon = sapply(tRNASE_copies$Codon,function(x) chartr("TUACG","TTACG",x)  )
tRNASE_copies$codon = sapply(tRNASE_copies$Codon,function(x) chartr("TUACG","AATGC",stri_reverse(x)) )
tRNASE_copies_table = table(tRNASE_copies$codon)
tRNA_GFF = F
}
code_table$nb_tRNA_copies = tRNASE_copies_table[code_table$codon]
code_table[is.na(code_table$nb_tRNA_copies),]$nb_tRNA_copies = 0
code_table$decoded = F
code_table$POC1 = F
code_table$POC2 = F
for (aa in unique(code_table$aa_name)){
if (length(code_table[code_table$aa_name == aa & code_table$nb_tRNA_copies != 0,]$nb_tRNA_copies) != 0){
tRNA_present = code_table[code_table$aa_name == aa & code_table$nb_tRNA_copies != 0,]$nb_tRNA_copies
names(tRNA_present) = code_table[code_table$aa_name == aa & code_table$nb_tRNA_copies != 0,]$anticodon
decoded_codon = unique(unlist(sapply(names(tRNA_present),function(x) paste(chartr( "TUACG" , "AATGC" , stri_reverse(substr(x,2,3))),unlist(wobble_rule[substr(x,1,1)]),sep=""))))
code_table[code_table$codon %in% decoded_codon,]$decoded = T
if ( all(codon_data[codon_data$aa_name == aa ,]$decoded)){
if ( !aa %in% c("Ter","Met","Trp")){
if (length(tRNA_present) > 1 & any(tRNA_present != max(tRNA_present))){
abundant = names(tRNA_present[ tRNA_present == max(tRNA_present)])
code_table[code_table$anticodon %in% abundant,]$POC1 = T
decoded_codon = unique(unlist(sapply(abundant,function(x) paste(chartr( "TUACG" , "AATGC" , stri_reverse(substr(x,2,3))),unlist(wobble_rule[substr(x,1,1)]),sep=""))))
if (any(code_table$codon %in% decoded_codon & code_table$nb_tRNA_copies == 0)){
code_table[code_table$codon %in% decoded_codon & code_table$nb_tRNA_copies == 0,]$POC1 = T}
} else if (length(tRNA_present) == 1){
abundant = names(tRNA_present[ tRNA_present == max(tRNA_present)])
code_table[code_table$anticodon %in% abundant,]$POC2 = T
}
}
}
}}
print(table(code_table$decoded))
code_table$nb_tRNA_copies = sapply(code_table$codon,function(codon) sum(tRNASE_copies_table[codon],na.rm = T))
code_table$nb_tRNA_copies_aa = sapply(code_table$aa_name,function(aa) sum(code_table[code_table$aa_name == aa,]$nb_tRNA_copies,na.rm = T))
code_table$RTF = code_table$nb_tRNA_copies / (code_table$nb_tRNA_copies_aa / code_table$nb_syn)
# write.table(code_table,paste(path,"/decoding_table.tab",sep=""),sep="\t",quote=F,row.names=F)
# bash_command <- paste("gzip -f ",path,"/decoding_table.tab",sep="")
# system(bash_command)
}
options( stringsAsFactors = F, scipen = 999 )
library(stringi)
path = "/home/fbenitiere/data/"
# path = "/beegfs/data/fbenitiere/"
code = read.delim(paste(path,"Projet-SplicedVariants/Fichiers-data/standard_genetic_code.tab",sep=""))
rownames(code) = code$codon
code$nb_syn = table(code$aa_name)[code$aa_name]
code$anticodon = sapply(code$codon,function(x) chartr("TUACG","AATGC",stri_reverse(x))  )
code$nb_syn_scu = table(paste(code$aa_name, substr(code$codon,1,2),sep="_"))[paste(code$aa_name, substr(code$codon,1,2),sep="_")]
code$aa_name_scu = code$aa_name
code[code$nb_syn == 6,]$aa_name_scu =  paste(code[code$nb_syn == 6,]$aa_name ,code[code$nb_syn == 6,]$nb_syn_scu  ,sep="_")
wobble_rule = list("G"=c("C","T"),
"A"=c("C","T","A"),
"T"=c("A","G"),
"C"=c("G"))
species = "Ficedula_albicollis"
print(species)
pathspecies = paste(path,"Projet-SplicedVariants/Annotations/",species,"/",sep="")
code_table = code
if (
file.exists(paste(pathspecies,"formatted_data/tRNAscan.tab",sep="")) &
file.size(paste(pathspecies,"formatted_data/tRNAscan.tab",sep="")) != 0 ){
tRNASE_gff = read.delim( paste(pathspecies,"/formatted_data/tRNAscan.tab",sep="") )
tRNASE_gff$codon = sapply(tRNASE_gff$anticodon,function(x) chartr("TUACG","AATGC",stri_reverse(x))  )
tRNASE_gff_table = table(tRNASE_gff$codon)
tRNASE_copies_table = tRNASE_gff_table
tRNA_GFF = T
} else if (
file.exists(paste(pathspecies,"formatted_data/tRNAscan_SE.tab",sep="")) &
file.size(paste(pathspecies,"formatted_data/tRNAscan_SE.tab",sep="")) != 0 ){
tRNASE_copies = read.delim(paste(pathspecies,"formatted_data/tRNAscan_SE.tab",sep=""), header = T)
tRNASE_copies = tRNASE_copies[as.numeric(tRNASE_copies$Score) > 55,]
tRNASE_copies = tRNASE_copies[tRNASE_copies$Note != "pseudo" | is.na(tRNASE_copies$Note),]
tRNASE_copies$anticodon = sapply(tRNASE_copies$Codon,function(x) chartr("TUACG","TTACG",x)  )
tRNASE_copies$codon = sapply(tRNASE_copies$Codon,function(x) chartr("TUACG","AATGC",stri_reverse(x)) )
tRNASE_copies_table = table(tRNASE_copies$codon)
tRNA_GFF = F
}
code_table$nb_tRNA_copies = tRNASE_copies_table[code_table$codon]
code_table[is.na(code_table$nb_tRNA_copies),]$nb_tRNA_copies = 0
code_table$decoded = F
code_table$POC1 = F
code_table$POC2 = F
for (aa in unique(code_table$aa_name)){
if (length(code_table[code_table$aa_name == aa & code_table$nb_tRNA_copies != 0,]$nb_tRNA_copies) != 0){
tRNA_present = code_table[code_table$aa_name == aa & code_table$nb_tRNA_copies != 0,]$nb_tRNA_copies
names(tRNA_present) = code_table[code_table$aa_name == aa & code_table$nb_tRNA_copies != 0,]$anticodon
decoded_codon = unique(unlist(sapply(names(tRNA_present),function(x) paste(chartr( "TUACG" , "AATGC" , stri_reverse(substr(x,2,3))),unlist(wobble_rule[substr(x,1,1)]),sep=""))))
code_table[code_table$codon %in% decoded_codon,]$decoded = T
if ( all(code_table[code_table$aa_name == aa ,]$decoded)){
if ( !aa %in% c("Ter","Met","Trp")){
if (length(tRNA_present) > 1 & any(tRNA_present != max(tRNA_present))){
abundant = names(tRNA_present[ tRNA_present == max(tRNA_present)])
code_table[code_table$anticodon %in% abundant,]$POC1 = T
decoded_codon = unique(unlist(sapply(abundant,function(x) paste(chartr( "TUACG" , "AATGC" , stri_reverse(substr(x,2,3))),unlist(wobble_rule[substr(x,1,1)]),sep=""))))
if (any(code_table$codon %in% decoded_codon & code_table$nb_tRNA_copies == 0)){
code_table[code_table$codon %in% decoded_codon & code_table$nb_tRNA_copies == 0,]$POC1 = T}
} else if (length(tRNA_present) == 1){
abundant = names(tRNA_present[ tRNA_present == max(tRNA_present)])
code_table[code_table$anticodon %in% abundant,]$POC2 = T
}
}
}
}}
print(table(code_table$decoded))
code_table$nb_tRNA_copies = sapply(code_table$codon,function(codon) sum(tRNASE_copies_table[codon],na.rm = T))
code_table$nb_tRNA_copies_aa = sapply(code_table$aa_name,function(aa) sum(code_table[code_table$aa_name == aa,]$nb_tRNA_copies,na.rm = T))
code_table$RTF = code_table$nb_tRNA_copies / (code_table$nb_tRNA_copies_aa / code_table$nb_syn)
code_table
colnames(code_table)
View(code_table)
code_table = code_table[,c("codon","aa","aa_name","anticodon","nb_tRNA_copies","decoded","POC1","POC2","nb_tRNA_copies_aa")]
code_table
code_table = code_table[,c("codon","aa","aa_name","anticodon","nb_tRNA_copies","decoded","POC1","POC2")]
code_table
write.table(code_table,paste("/home/fbenitiere/data/dossier_de_partage/Ficedula_albicollis_codon_usage",sep=""),sep="\t",quote=F,row.names=F)
write.table(code_table,paste("/home/fbenitiere/data/dossier_de_partage/Ficedula_albicollis_codon_usage/decoding_table.tab",sep=""),sep="\t",quote=F,row.names=F)
codon_usage = read.delim(paste(pathspecies,"formatted_data/protein_codon_content.tab",sep=""))
codon_usage
colnames(codon_usage)
for ( type_aa in c( "POC1","POC2","POCs")){
if (type_aa == "POC1" ){
subset_selected = tRNA_optimal[tRNA_optimal$POC1,]
list_POC = subset_selected$codon
list_aa = unique(subset_selected$aa_name)
list_codon = tRNA_optimal[tRNA_optimal$aa_name %in% list_aa,]$codon
} else if  (type_aa == "POC2" ){
subset_selected = tRNA_optimal[tRNA_optimal$POC2,]
list_POC = subset_selected$codon
list_aa = unique(subset_selected$aa_name)
list_codon = tRNA_optimal[tRNA_optimal$aa_name %in% list_aa,]$codon
} else if  (type_aa == "POCs" ){
subset_selected = tRNA_optimal[tRNA_optimal$POC2 | tRNA_optimal$POC1,]
list_POC = subset_selected$codon
list_aa = unique(subset_selected$aa_name)
list_codon = tRNA_optimal[tRNA_optimal$aa_name %in% list_aa,]$codon
}
if ( length(list_POC) != 0 ){
##### Over-used of POC in expressed genes
POC_obs = rowSums(codon_usage[ list_POC ],na.rm = T)
POC_codons_obs = rowSums(codon_usage[ list_codon ],na.rm = T)
POC_obs_intronic = rowSums(codon_usage[paste(list_POC,'_intronic',sep = "")],na.rm = T)
POC_codons_obs_intronic = rowSums(codon_usage[paste(list_codon,'_intronic',sep = "")],na.rm = T)
}
}
tRNA_optimal = code_table
colnames(codon_usage)
for ( type_aa in c( "POC1","POC2","POCs")){
if (type_aa == "POC1" ){
subset_selected = tRNA_optimal[tRNA_optimal$POC1,]
list_POC = subset_selected$codon
list_aa = unique(subset_selected$aa_name)
list_codon = tRNA_optimal[tRNA_optimal$aa_name %in% list_aa,]$codon
} else if  (type_aa == "POC2" ){
subset_selected = tRNA_optimal[tRNA_optimal$POC2,]
list_POC = subset_selected$codon
list_aa = unique(subset_selected$aa_name)
list_codon = tRNA_optimal[tRNA_optimal$aa_name %in% list_aa,]$codon
} else if  (type_aa == "POCs" ){
subset_selected = tRNA_optimal[tRNA_optimal$POC2 | tRNA_optimal$POC1,]
list_POC = subset_selected$codon
list_aa = unique(subset_selected$aa_name)
list_codon = tRNA_optimal[tRNA_optimal$aa_name %in% list_aa,]$codon
}
if ( length(list_POC) != 0 ){
##### Over-used of POC in expressed genes
POC_obs = rowSums(codon_usage[ list_POC ],na.rm = T)
POC_codons_obs = rowSums(codon_usage[ list_codon ],na.rm = T)
POC_obs_intronic = rowSums(codon_usage[paste(list_POC,'_intronic',sep = "")],na.rm = T)
POC_codons_obs_intronic = rowSums(codon_usage[paste(list_codon,'_intronic',sep = "")],na.rm = T)
}
}
for ( type_aa in c( "POC1","POC2","POCs")){
if (type_aa == "POC1" ){
subset_selected = tRNA_optimal[tRNA_optimal$POC1,]
list_POC = subset_selected$codon
list_aa = unique(subset_selected$aa_name)
list_codon = tRNA_optimal[tRNA_optimal$aa_name %in% list_aa,]$codon
} else if  (type_aa == "POC2" ){
subset_selected = tRNA_optimal[tRNA_optimal$POC2,]
list_POC = subset_selected$codon
list_aa = unique(subset_selected$aa_name)
list_codon = tRNA_optimal[tRNA_optimal$aa_name %in% list_aa,]$codon
} else if  (type_aa == "POCs" ){
subset_selected = tRNA_optimal[tRNA_optimal$POC2 | tRNA_optimal$POC1,]
list_POC = subset_selected$codon
list_aa = unique(subset_selected$aa_name)
list_codon = tRNA_optimal[tRNA_optimal$aa_name %in% list_aa,]$codon
}
if ( length(list_POC) != 0 ){
##### Over-used of POC in expressed genes
POC_obs = rowSums(codon_usage[ list_POC ],na.rm = T)
POC_codons_obs = rowSums(codon_usage[ list_codon ],na.rm = T)
}
}
POC_obs
POC_codons_obs
list_POC
list_codon
codon_usage = read.delim(paste(pathspecies,"formatted_data/protein_codon_content.tab",sep=""))
tRNA_optimal = code_table
colnames(codon_usage)
for ( type_aa in c( "POC1","POC2","POCs")){
if (type_aa == "POC1" ){
subset_selected = tRNA_optimal[tRNA_optimal$POC1,]
list_POC = subset_selected$codon
list_aa = unique(subset_selected$aa_name)
list_codon = tRNA_optimal[tRNA_optimal$aa_name %in% list_aa,]$codon
} else if  (type_aa == "POC2" ){
subset_selected = tRNA_optimal[tRNA_optimal$POC2,]
list_POC = subset_selected$codon
list_aa = unique(subset_selected$aa_name)
list_codon = tRNA_optimal[tRNA_optimal$aa_name %in% list_aa,]$codon
} else if  (type_aa == "POCs" ){
subset_selected = tRNA_optimal[tRNA_optimal$POC2 | tRNA_optimal$POC1,]
list_POC = subset_selected$codon
list_aa = unique(subset_selected$aa_name)
list_codon = tRNA_optimal[tRNA_optimal$aa_name %in% list_aa,]$codon
}
if ( length(list_POC) != 0 ){
##### Over-used of POC in expressed genes
POC_obs = rowSums(codon_usage[ list_POC ],na.rm = T)
POC_codons_obs = rowSums(codon_usage[ list_codon ],na.rm = T)
codon_usage[type_aa]  =  POC_obs / POC_codons_obs
}
}
colnames(codon_usage)
codon_usage = codon_usage[,c("gene_id", "protein_id" ,    "chromosome", "start_codon", "end_codon" ,"length_cds","POC1","POC2","POCs", "AAA","AAT","AAG","AAC","ATA","ATT","ATG","ATC","AGA"
,   "AGT","AGG","AGC","ACA","ACT","ACG","ACC","TAA","TAT","TAG","TAC"
,   "TTA","TTT","TTG","TTC","TGA","TGT","TGG","TGC","TCA","TCT","TCG"
,   "TCC","GAA","GAT","GAG","GAC","GTA","GTT","GTG","GTC","GGA","GGT"
,  "GGG","GGC","GCA","GCT","GCG","GCC","CAA","CAT","CAG","CAC","CTA"
,  "CTT","CTG","CTC","CGA","CGT","CGG","CGC","CCA","CCT","CCG","CCC"
,   "A3", "T3", "G3", "C3"  )]
colnames(codon_usage)
View(codon_usage)
ggplot(codon_usage,aes(x=length_cds,y=POC1)) + geom_point()
library(ggplot2)
ggplot(codon_usage,aes(x=length_cds,y=POC1)) + geom_point()
ggplot(codon_usage,aes(x=length_cds,y=POC2)) + geom_point()
ggplot(codon_usage,aes(x=length_cds,y=POC1)) + geom_point()
write.table(codon_usage,paste("/home/fbenitiere/data/dossier_de_partage/Ficedula_albicollis_codon_usage/codon_usage.tab",sep=""),sep="\t",quote=F,row.names=F)
substr(colnames(codon_usage),3,3)
which(substr(colnames(codon_usage),3,3) == "G|C"
which(substr(colnames(codon_usage),3,3) == "G|C")
which(substr(colnames(codon_usage),3,3) == "G|C")
which(substr(colnames(codon_usage),3,3) == "G")
which(substr(colnames(codon_usage),3,3) == "G" | substr(colnames(codon_usage),3,3) == "C" )
GC3_obs = rowSums(codon_usage[,which(substr(colnames(codon_usage),3,3) == "G" | substr(colnames(codon_usage),3,3) == "C" )],na.rm = T)
GC3_obs
codon_usage[,which(substr(colnames(codon_usage),3,3) == "G" | substr(colnames(codon_usage),3,3) == "C" )]
substr(colnames(codon_usage),3,3)
substr(colnames(codon_usage),3,3) == "C"
which(substr(colnames(codon_usage),3,3) == "G"
which(substr(colnames(codon_usage),3,3) == "G"
which(substr(colnames(codon_usage),3,3) == "G"
substr(colnames(codon_usage),3,3) == "G"
substr(colnames(codon_usage),3,3) == "G"
which(substr(colnames(codon_usage),3,3) == "G" | substr(colnames(codon_usage),3,3) == "C" )
codon_usage[,which(substr(colnames(codon_usage),3,3) == "G" | substr(colnames(codon_usage),3,3) == "C" )]
colnames(codon_usage)
substr(colnames(codon_usage),3,3)
library(stringr)
str_split_1(colnames(codon_usage)
)
str_split_1(colnames(codon_usage),"")
str_split_1
str_split_1(colnames(codon_usage),"")
str_split_1(colnames(codon_usage),".")
colnames(codon_usage)
sapply(colnames(codon_usage),function(x) str_split_1(x,"."))
sapply(colnames(codon_usage),function(x) str_split_1(x,""))
sapply(colnames(codon_usage),function(x) str_split_1(x,"")[nchar(x)])
last_charc = sapply(colnames(codon_usage),function(x) str_split_1(x,"")[nchar(x)])
GC3_obs = rowSums(codon_usage[,which(last_charc == "G" | last_charc == "C" )],na.rm = T)
GC3_obs
rowSums(codon_usage[c("C3","G3")],na.rm = T)
rowSums(codon_usage[,which(last_charc == "G" | last_charc == "C" )],na.rm = T) ==  rowSums(codon_usage[c("C3","G3")],na.rm = T)
table(rowSums(codon_usage[,which(last_charc == "G" | last_charc == "C" )],na.rm = T) ==  rowSums(codon_usage[c("C3","G3")],na.rm = T))
options( stringsAsFactors = F, scipen = 999 )
library(stringi)
path = "/home/fbenitiere/data/"
# path = "/beegfs/data/fbenitiere/"
code = read.delim(paste(path,"Projet-SplicedVariants/Fichiers-data/standard_genetic_code.tab",sep=""))
rownames(code) = code$codon
code$nb_syn = table(code$aa_name)[code$aa_name]
code$anticodon = sapply(code$codon,function(x) chartr("TUACG","AATGC",stri_reverse(x))  )
code$nb_syn_scu = table(paste(code$aa_name, substr(code$codon,1,2),sep="_"))[paste(code$aa_name, substr(code$codon,1,2),sep="_")]
code$aa_name_scu = code$aa_name
code[code$nb_syn == 6,]$aa_name_scu =  paste(code[code$nb_syn == 6,]$aa_name ,code[code$nb_syn == 6,]$nb_syn_scu  ,sep="_")
wobble_rule = list("G"=c("C","T"),
"A"=c("C","T","A"),
"T"=c("A","G"),
"C"=c("G"))
species = "Ficedula_albicollis"
print(species)
pathspecies = paste(path,"Projet-SplicedVariants/Annotations/",species,"/",sep="")
code_table = code
if (
file.exists(paste(pathspecies,"formatted_data/tRNAscan.tab",sep="")) &
file.size(paste(pathspecies,"formatted_data/tRNAscan.tab",sep="")) != 0 ){
tRNASE_gff = read.delim( paste(pathspecies,"/formatted_data/tRNAscan.tab",sep="") )
tRNASE_gff$codon = sapply(tRNASE_gff$anticodon,function(x) chartr("TUACG","AATGC",stri_reverse(x))  )
tRNASE_gff_table = table(tRNASE_gff$codon)
tRNASE_copies_table = tRNASE_gff_table
tRNA_GFF = T
} else if (
file.exists(paste(pathspecies,"formatted_data/tRNAscan_SE.tab",sep="")) &
file.size(paste(pathspecies,"formatted_data/tRNAscan_SE.tab",sep="")) != 0 ){
tRNASE_copies = read.delim(paste(pathspecies,"formatted_data/tRNAscan_SE.tab",sep=""), header = T)
tRNASE_copies = tRNASE_copies[as.numeric(tRNASE_copies$Score) > 55,]
tRNASE_copies = tRNASE_copies[tRNASE_copies$Note != "pseudo" | is.na(tRNASE_copies$Note),]
tRNASE_copies$anticodon = sapply(tRNASE_copies$Codon,function(x) chartr("TUACG","TTACG",x)  )
tRNASE_copies$codon = sapply(tRNASE_copies$Codon,function(x) chartr("TUACG","AATGC",stri_reverse(x)) )
tRNASE_copies_table = table(tRNASE_copies$codon)
tRNA_GFF = F
}
code_table$nb_tRNA_copies = tRNASE_copies_table[code_table$codon]
code_table[is.na(code_table$nb_tRNA_copies),]$nb_tRNA_copies = 0
code_table$decoded = F
code_table$POC1 = F
code_table$POC2 = F
for (aa in unique(code_table$aa_name)){
if (length(code_table[code_table$aa_name == aa & code_table$nb_tRNA_copies != 0,]$nb_tRNA_copies) != 0){
tRNA_present = code_table[code_table$aa_name == aa & code_table$nb_tRNA_copies != 0,]$nb_tRNA_copies
names(tRNA_present) = code_table[code_table$aa_name == aa & code_table$nb_tRNA_copies != 0,]$anticodon
decoded_codon = unique(unlist(sapply(names(tRNA_present),function(x) paste(chartr( "TUACG" , "AATGC" , stri_reverse(substr(x,2,3))),unlist(wobble_rule[substr(x,1,1)]),sep=""))))
code_table[code_table$codon %in% decoded_codon,]$decoded = T
if ( all(code_table[code_table$aa_name == aa ,]$decoded)){
if ( !aa %in% c("Ter","Met","Trp")){
if (length(tRNA_present) > 1 & any(tRNA_present != max(tRNA_present))){
, abundant = names(tRNA_present[ tRNA_present == max(tRNA_present)])
options( stringsAsFactors = F, scipen = 999 )
library(stringi)
path = "/home/fbenitiere/data/"
# path = "/beegfs/data/fbenitiere/"
code = read.delim(paste(path,"Projet-SplicedVariants/Fichiers-data/standard_genetic_code.tab",sep=""))
rownames(code) = code$codon
code$nb_syn = table(code$aa_name)[code$aa_name]
code$anticodon = sapply(code$codon,function(x) chartr("TUACG","AATGC",stri_reverse(x))  )
code$nb_syn_scu = table(paste(code$aa_name, substr(code$codon,1,2),sep="_"))[paste(code$aa_name, substr(code$codon,1,2),sep="_")]
code$aa_name_scu = code$aa_name
code[code$nb_syn == 6,]$aa_name_scu =  paste(code[code$nb_syn == 6,]$aa_name ,code[code$nb_syn == 6,]$nb_syn_scu  ,sep="_")
wobble_rule = list("G"=c("C","T"),
"A"=c("C","T","A"),
"T"=c("A","G"),
"C"=c("G"))
species = "Ficedula_albicollis"
print(species)
pathspecies = paste(path,"Projet-SplicedVariants/Annotations/",species,"/",sep="")
code_table = code
if (
file.exists(paste(pathspecies,"formatted_data/tRNAscan.tab",sep="")) &
file.size(paste(pathspecies,"formatted_data/tRNAscan.tab",sep="")) != 0 ){
tRNASE_gff = read.delim( paste(pathspecies,"/formatted_data/tRNAscan.tab",sep="") )
tRNASE_gff$codon = sapply(tRNASE_gff$anticodon,function(x) chartr("TUACG","AATGC",stri_reverse(x))  )
tRNASE_gff_table = table(tRNASE_gff$codon)
tRNASE_copies_table = tRNASE_gff_table
tRNA_GFF = T
} else if (
file.exists(paste(pathspecies,"formatted_data/tRNAscan_SE.tab",sep="")) &
file.size(paste(pathspecies,"formatted_data/tRNAscan_SE.tab",sep="")) != 0 ){
tRNASE_copies = read.delim(paste(pathspecies,"formatted_data/tRNAscan_SE.tab",sep=""), header = T)
tRNASE_copies = tRNASE_copies[as.numeric(tRNASE_copies$Score) > 55,]
tRNASE_copies = tRNASE_copies[tRNASE_copies$Note != "pseudo" | is.na(tRNASE_copies$Note),]
tRNASE_copies$anticodon = sapply(tRNASE_copies$Codon,function(x) chartr("TUACG","TTACG",x)  )
tRNASE_copies$codon = sapply(tRNASE_copies$Codon,function(x) chartr("TUACG","AATGC",stri_reverse(x)) )
tRNASE_copies_table = table(tRNASE_copies$codon)
tRNA_GFF = F
}
code_table$nb_tRNA_copies = tRNASE_copies_table[code_table$codon]
code_table[is.na(code_table$nb_tRNA_copies),]$nb_tRNA_copies = 0
code_table$decoded = F
code_table$POC1 = F
code_table$POC2 = F
for (aa in unique(code_table$aa_name)){
if (length(code_table[code_table$aa_name == aa & code_table$nb_tRNA_copies != 0,]$nb_tRNA_copies) != 0){
tRNA_present = code_table[code_table$aa_name == aa & code_table$nb_tRNA_copies != 0,]$nb_tRNA_copies
names(tRNA_present) = code_table[code_table$aa_name == aa & code_table$nb_tRNA_copies != 0,]$anticodon
decoded_codon = unique(unlist(sapply(names(tRNA_present),function(x) paste(chartr( "TUACG" , "AATGC" , stri_reverse(substr(x,2,3))),unlist(wobble_rule[substr(x,1,1)]),sep=""))))
code_table[code_table$codon %in% decoded_codon,]$decoded = T
if ( all(code_table[code_table$aa_name == aa ,]$decoded)){
if ( !aa %in% c("Ter","Met","Trp")){
if (length(tRNA_present) > 1 & any(tRNA_present != max(tRNA_present))){
abundant = names(tRNA_present[ tRNA_present == max(tRNA_present)])
code_table[code_table$anticodon %in% abundant,]$POC1 = T
decoded_codon = unique(unlist(sapply(abundant,function(x) paste(chartr( "TUACG" , "AATGC" , stri_reverse(substr(x,2,3))),unlist(wobble_rule[substr(x,1,1)]),sep=""))))
if (any(code_table$codon %in% decoded_codon & code_table$nb_tRNA_copies == 0)){
code_table[code_table$codon %in% decoded_codon & code_table$nb_tRNA_copies == 0,]$POC1 = T}
} else if (length(tRNA_present) == 1){
abundant = names(tRNA_present[ tRNA_present == max(tRNA_present)])
code_table[code_table$anticodon %in% abundant,]$POC2 = T
}
}
}
}}
print(table(code_table$decoded))
code_table$nb_tRNA_copies = sapply(code_table$codon,function(codon) sum(tRNASE_copies_table[codon],na.rm = T))
code_table$nb_tRNA_copies_aa = sapply(code_table$aa_name,function(aa) sum(code_table[code_table$aa_name == aa,]$nb_tRNA_copies,na.rm = T))
code_table$RTF = code_table$nb_tRNA_copies / (code_table$nb_tRNA_copies_aa / code_table$nb_syn)
code_table = code_table[,c("codon","aa","aa_name","anticodon","nb_tRNA_copies","decoded","POC1","POC2")]
write.table(code_table,paste("/home/fbenitiere/data/dossier_de_partage/Ficedula_albicollis_codon_usage/decoding_table.tab",sep=""),sep="\t",quote=F,row.names=F)
codon_usage = read.delim(paste(pathspecies,"formatted_data/protein_codon_content.tab",sep=""))
tRNA_optimal = code_table
for ( type_aa in c( "POC1","POC2","POCs")){
if (type_aa == "POC1" ){
subset_selected = tRNA_optimal[tRNA_optimal$POC1,]
list_POC = subset_selected$codon
list_aa = unique(subset_selected$aa_name)
list_codon = tRNA_optimal[tRNA_optimal$aa_name %in% list_aa,]$codon
} else if  (type_aa == "POC2" ){
subset_selected = tRNA_optimal[tRNA_optimal$POC2,]
list_POC = subset_selected$codon
list_aa = unique(subset_selected$aa_name)
list_codon = tRNA_optimal[tRNA_optimal$aa_name %in% list_aa,]$codon
} else if  (type_aa == "POCs" ){
subset_selected = tRNA_optimal[tRNA_optimal$POC2 | tRNA_optimal$POC1,]
list_POC = subset_selected$codon
list_aa = unique(subset_selected$aa_name)
list_codon = tRNA_optimal[tRNA_optimal$aa_name %in% list_aa,]$codon
}
if ( length(list_POC) != 0 ){
##### Over-used of POC in expressed genes
POC_obs = rowSums(codon_usage[ list_POC ],na.rm = T)
POC_codons_obs = rowSums(codon_usage[ list_codon ],na.rm = T)
codon_usage[type_aa]  =  POC_obs / POC_codons_obs
}
}
colnames(codon_usage)
codon_usage = codon_usage[,c("gene_id", "protein_id" ,    "chromosome", "start_codon", "end_codon" ,"length_cds","POC1","POC2","POCs", "AAA","AAT","AAG","AAC","ATA","ATT","ATG","ATC","AGA"
,   "AGT","AGG","AGC","ACA","ACT","ACG","ACC","TAA","TAT","TAG","TAC"
,   "TTA","TTT","TTG","TTC","TGA","TGT","TGG","TGC","TCA","TCT","TCG"
,   "TCC","GAA","GAT","GAG","GAC","GTA","GTT","GTG","GTC","GGA","GGT"
,  "GGG","GGC","GCA","GCT","GCG","GCC","CAA","CAT","CAG","CAC","CTA"
,  "CTT","CTG","CTC","CGA","CGT","CGG","CGC","CCA","CCT","CCG","CCC"
,   "A3", "T3", "G3", "C3"  )]
write.table(codon_usage,paste("/home/fbenitiere/data/dossier_de_partage/Ficedula_albicollis_codon_usage/codon_usage.tab",sep=""),sep="\t",quote=F,row.names=F)
type_aa="POC1"
subset_selected = tRNA_optimal[tRNA_optimal$POC1,]
list_POC = subset_selected$codon
list_aa = unique(subset_selected$aa_name)
list_codon = tRNA_optimal[tRNA_optimal$aa_name %in% list_aa,]$codon
subset_selected
list_POC
list_aa
list_codon
